"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\n    \"block\",\n    \"list\",\n    \"listItem\",\n    \"marks\",\n    \"types\"\n], _excluded2 = [\n    \"listItem\"\n], _excluded3 = [\n    \"_key\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\n\nfunction mergeComponents(parent, overrides) {\n    const { block, list, listItem, marks, types } = overrides, rest = _objectWithoutProperties(overrides, _excluded);\n    return _objectSpread(_objectSpread({}, parent), {}, {\n        block: mergeDeeply(parent, overrides, \"block\"),\n        list: mergeDeeply(parent, overrides, \"list\"),\n        listItem: mergeDeeply(parent, overrides, \"listItem\"),\n        marks: mergeDeeply(parent, overrides, \"marks\"),\n        types: mergeDeeply(parent, overrides, \"types\")\n    }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n    const override = overrides[key];\n    const parentVal = parent[key];\n    if (typeof override === \"function\") {\n        return override;\n    }\n    if (override && typeof parentVal === \"function\") {\n        return override;\n    }\n    if (override) {\n        return _objectSpread(_objectSpread({}, parentVal), override);\n    }\n    return parentVal;\n}\nconst link = (_ref)=>{\n    let { children, value } = _ref;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: value == null ? void 0 : value.href,\n        children\n    });\n};\nconst underlineStyle = {\n    textDecoration: \"underline\"\n};\nconst defaultMarks = {\n    em: (_ref2)=>{\n        let { children } = _ref2;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n            children\n        });\n    },\n    strong: (_ref3)=>{\n        let { children } = _ref3;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n            children\n        });\n    },\n    code: (_ref4)=>{\n        let { children } = _ref4;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children\n        });\n    },\n    underline: (_ref5)=>{\n        let { children } = _ref5;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n            style: underlineStyle,\n            children\n        });\n    },\n    \"strike-through\": (_ref6)=>{\n        let { children } = _ref6;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"del\", {\n            children\n        });\n    },\n    link\n};\nconst defaultLists = {\n    number: (_ref7)=>{\n        let { children } = _ref7;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ol\", {\n            children\n        });\n    },\n    bullet: (_ref8)=>{\n        let { children } = _ref8;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n            children\n        });\n    }\n};\nconst DefaultListItem = (_ref9)=>{\n    let { children } = _ref9;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children\n    });\n};\nconst getTemplate = (type, prop)=>\"[@portabletext/react] Unknown \".concat(type, \", specify a component for it in the `components.\").concat(prop, \"` prop\");\nconst unknownTypeWarning = (typeName)=>getTemplate('block type \"'.concat(typeName, '\"'), \"types\");\nconst unknownMarkWarning = (markType)=>getTemplate('mark type \"'.concat(markType, '\"'), \"marks\");\nconst unknownBlockStyleWarning = (blockStyle)=>getTemplate('block style \"'.concat(blockStyle, '\"'), \"block\");\nconst unknownListStyleWarning = (listStyle)=>getTemplate('list style \"'.concat(listStyle, '\"'), \"list\");\nconst unknownListItemStyleWarning = (listStyle)=>getTemplate('list item style \"'.concat(listStyle, '\"'), \"listItem\");\nfunction printWarning(message) {\n    console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n};\nconst DefaultUnknownType = (_ref10)=>{\n    let { value, isInline } = _ref10;\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        style: hidden,\n        children: warning\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        style: hidden,\n        children: warning\n    });\n};\nconst DefaultUnknownMark = (_ref11)=>{\n    let { markType, children } = _ref11;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        className: \"unknown__pt__mark__\".concat(markType),\n        children\n    });\n};\nconst DefaultUnknownBlockStyle = (_ref12)=>{\n    let { children } = _ref12;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n        children\n    });\n};\nconst DefaultUnknownList = (_ref13)=>{\n    let { children } = _ref13;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n        children\n    });\n};\nconst DefaultUnknownListItem = (_ref14)=>{\n    let { children } = _ref14;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children\n    });\n};\nconst DefaultHardBreak = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"br\", {});\nconst defaultBlockStyles = {\n    normal: (_ref15)=>{\n        let { children } = _ref15;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children\n        });\n    },\n    blockquote: (_ref16)=>{\n        let { children } = _ref16;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"blockquote\", {\n            children\n        });\n    },\n    h1: (_ref17)=>{\n        let { children } = _ref17;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h1\", {\n            children\n        });\n    },\n    h2: (_ref18)=>{\n        let { children } = _ref18;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n            children\n        });\n    },\n    h3: (_ref19)=>{\n        let { children } = _ref19;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h3\", {\n            children\n        });\n    },\n    h4: (_ref20)=>{\n        let { children } = _ref20;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h4\", {\n            children\n        });\n    },\n    h5: (_ref21)=>{\n        let { children } = _ref21;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h5\", {\n            children\n        });\n    },\n    h6: (_ref22)=>{\n        let { children } = _ref22;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h6\", {\n            children\n        });\n    }\n};\nconst defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction PortableText(_ref23) {\n    let { value: input, components: componentOverrides, listNestingMode, onMissingComponent: missingComponentHandler = printWarning } = _ref23;\n    const handleMissingComponent = missingComponentHandler || noop;\n    const blocks = Array.isArray(input) ? input : [\n        input\n    ];\n    const nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.LIST_NEST_MODE_HTML);\n    const components = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents;\n    }, [\n        componentOverrides\n    ]);\n    const renderNode = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>getNodeRenderer(components, handleMissingComponent), [\n        components,\n        handleMissingComponent\n    ]);\n    const rendered = nested.map((node, index)=>renderNode({\n            node,\n            index,\n            isInline: false,\n            renderNode\n        }));\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: rendered\n    });\n}\nconst getNodeRenderer = (components, handleMissingComponent)=>{\n    function renderNode(options) {\n        const { node, index, isInline } = options;\n        const key = node._key || \"node-\".concat(index);\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node)) {\n            return renderList(node, index, key);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node)) {\n            return renderListItem(node, index, key);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node)) {\n            return renderSpan(node, index, key);\n        }\n        if (hasCustomComponentForNode(node)) {\n            return renderCustomBlock(node, index, key, isInline);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node)) {\n            return renderBlock(node, index, key, isInline);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node)) {\n            return renderText(node, key);\n        }\n        return renderUnknownType(node, index, key, isInline);\n    }\n    function hasCustomComponentForNode(node) {\n        return node._type in components.types;\n    }\n    function renderListItem(node, index, key) {\n        const tree = serializeBlock({\n            node,\n            index,\n            isInline: false,\n            renderNode\n        });\n        const renderer = components.listItem;\n        const handler = typeof renderer === \"function\" ? renderer : renderer[node.listItem];\n        const Li = handler || components.unknownListItem;\n        if (Li === components.unknownListItem) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListItemStyleWarning(style), {\n                type: style,\n                nodeType: \"listItemStyle\"\n            });\n        }\n        let children = tree.children;\n        if (node.style && node.style !== \"normal\") {\n            const { listItem } = node, blockNode = _objectWithoutProperties(node, _excluded2);\n            children = renderNode({\n                node: blockNode,\n                index,\n                isInline: false,\n                renderNode\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Li, {\n            value: node,\n            index,\n            isInline: false,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderList(node, index, key) {\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n                    _key: \"li-\".concat(index, \"-\").concat(childIndex)\n                }),\n                index: childIndex,\n                isInline: false,\n                renderNode\n            }));\n        const component = components.list;\n        const handler = typeof component === \"function\" ? component : component[node.listItem];\n        const List = handler || components.unknownList;\n        if (List === components.unknownList) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListStyleWarning(style), {\n                nodeType: \"listStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(List, {\n            value: node,\n            index,\n            isInline: false,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderSpan(node, _index, key) {\n        const { markDef, markType, markKey } = node;\n        const Span = components.marks[markType] || components.unknownMark;\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child,\n                index: childIndex,\n                isInline: true,\n                renderNode\n            }));\n        if (Span === components.unknownMark) {\n            handleMissingComponent(unknownMarkWarning(markType), {\n                nodeType: \"mark\",\n                type: markType\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Span, {\n            text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n            value: markDef,\n            markType,\n            markKey,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderBlock(node, index, key, isInline) {\n        const _serializeBlock = serializeBlock({\n            node,\n            index,\n            isInline,\n            renderNode\n        }), { _key } = _serializeBlock, props = _objectWithoutProperties(_serializeBlock, _excluded3);\n        const style = props.node.style || \"normal\";\n        const handler = typeof components.block === \"function\" ? components.block : components.block[style];\n        const Block = handler || components.unknownBlockStyle;\n        if (Block === components.unknownBlockStyle) {\n            handleMissingComponent(unknownBlockStyleWarning(style), {\n                nodeType: \"blockStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n            value: props.node,\n            renderNode\n        }), key);\n    }\n    function renderText(node, key) {\n        if (node.text === \"\\n\") {\n            const HardBreak = components.hardBreak;\n            return HardBreak ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(HardBreak, {}, key) : \"\\n\";\n        }\n        return node.text;\n    }\n    function renderUnknownType(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        handleMissingComponent(unknownTypeWarning(node._type), {\n            nodeType: \"block\",\n            type: node._type\n        });\n        const UnknownType = components.unknownType;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n    }\n    function renderCustomBlock(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        const Node = components.types[node._type];\n        return Node ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n    }\n    return renderNode;\n};\nfunction serializeBlock(options) {\n    const { node, index, isInline, renderNode } = options;\n    const tree = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node);\n    const children = tree.map((child, i)=>renderNode({\n            node: child,\n            isInline: true,\n            index: i,\n            renderNode\n        }));\n    return {\n        _key: node._key || \"block-\".concat(index),\n        children,\n        index,\n        isInline,\n        node\n    };\n}\nfunction noop() {}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction isPortableTextSpan(node) {\n    return node._type === \"span\" && \"text\" in node && typeof node.text === \"string\" && (typeof node.marks === \"undefined\" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark === \"string\"));\n}\nfunction isPortableTextBlock(node) {\n    return(// A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def)=>typeof def._key === \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child)=>typeof child === \"object\" && \"_type\" in child));\n}\nfunction isPortableTextListItemBlock(block) {\n    return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem === \"string\" && (typeof block.level === \"undefined\" || typeof block.level === \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n    return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n    return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n    return node._type === \"@text\";\n}\nconst knownDecorators = [\n    \"strong\",\n    \"em\",\n    \"code\",\n    \"underline\",\n    \"strike-through\"\n];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n    if (!isPortableTextSpan(span) || !span.marks) {\n        return [];\n    }\n    if (!span.marks.length) {\n        return [];\n    }\n    const marks = span.marks.slice();\n    const occurences = {};\n    marks.forEach((mark)=>{\n        occurences[mark] = 1;\n        for(let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++){\n            const sibling = blockChildren[siblingIndex];\n            if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n                occurences[mark]++;\n            } else {\n                break;\n            }\n        }\n    });\n    return marks.sort((markA, markB)=>sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n    const aOccurences = occurences[markA];\n    const bOccurences = occurences[markB];\n    if (aOccurences !== bOccurences) {\n        return bOccurences - aOccurences;\n    }\n    const aKnownPos = knownDecorators.indexOf(markA);\n    const bKnownPos = knownDecorators.indexOf(markB);\n    if (aKnownPos !== bKnownPos) {\n        return aKnownPos - bKnownPos;\n    }\n    return markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n    var _a;\n    const { children, markDefs = [] } = block;\n    if (!children || !children.length) {\n        return [];\n    }\n    const sortedMarks = children.map(sortMarksByOccurences);\n    const rootNode = {\n        _type: \"@span\",\n        children: [],\n        markType: \"<unknown>\"\n    };\n    let nodeStack = [\n        rootNode\n    ];\n    for(let i = 0; i < children.length; i++){\n        const span = children[i];\n        if (!span) {\n            continue;\n        }\n        const marksNeeded = sortedMarks[i] || [];\n        let pos = 1;\n        if (nodeStack.length > 1) {\n            for(pos; pos < nodeStack.length; pos++){\n                const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\";\n                const index = marksNeeded.indexOf(mark);\n                if (index === -1) {\n                    break;\n                }\n                marksNeeded.splice(index, 1);\n            }\n        }\n        nodeStack = nodeStack.slice(0, pos);\n        let currentNode = nodeStack[nodeStack.length - 1];\n        if (!currentNode) {\n            continue;\n        }\n        for (const markKey of marksNeeded){\n            const markDef = markDefs.find((def)=>def._key === markKey);\n            const markType = markDef ? markDef._type : markKey;\n            const node = {\n                _type: \"@span\",\n                _key: span._key,\n                children: [],\n                markDef,\n                markType,\n                markKey\n            };\n            currentNode.children.push(node);\n            nodeStack.push(node);\n            currentNode = node;\n        }\n        if (isPortableTextSpan(span)) {\n            const lines = span.text.split(\"\\n\");\n            for(let line = lines.length; line-- > 1;){\n                lines.splice(line, 0, \"\\n\");\n            }\n            currentNode.children = currentNode.children.concat(lines.map((text)=>({\n                    _type: \"@text\",\n                    text\n                })));\n        } else {\n            currentNode.children = currentNode.children.concat(span);\n        }\n    }\n    return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n    const tree = [];\n    let currentList;\n    for(let i = 0; i < blocks.length; i++){\n        const block = blocks[i];\n        if (!block) {\n            continue;\n        }\n        if (!isPortableTextListItemBlock(block)) {\n            tree.push(block);\n            currentList = void 0;\n            continue;\n        }\n        if (!currentList) {\n            currentList = listFromBlock(block, i, mode);\n            tree.push(currentList);\n            continue;\n        }\n        if (blockMatchesList(block, currentList)) {\n            currentList.children.push(block);\n            continue;\n        }\n        if ((block.level || 1) > currentList.level) {\n            const newList = listFromBlock(block, i, mode);\n            if (mode === \"html\") {\n                const lastListItem = currentList.children[currentList.children.length - 1];\n                const newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n                    children: [\n                        ...lastListItem.children,\n                        newList\n                    ]\n                });\n                currentList.children[currentList.children.length - 1] = newLastChild;\n            } else {\n                currentList.children.push(newList);\n            }\n            currentList = newList;\n            continue;\n        }\n        if ((block.level || 1) < currentList.level) {\n            const matchingBranch = tree[tree.length - 1];\n            const match = matchingBranch && findListMatching(matchingBranch, block);\n            if (match) {\n                currentList = match;\n                currentList.children.push(block);\n                continue;\n            }\n            currentList = listFromBlock(block, i, mode);\n            tree.push(currentList);\n            continue;\n        }\n        if (block.listItem !== currentList.listItem) {\n            const matchingBranch = tree[tree.length - 1];\n            const match = matchingBranch && findListMatching(matchingBranch, {\n                level: block.level || 1\n            });\n            if (match && match.listItem === block.listItem) {\n                currentList = match;\n                currentList.children.push(block);\n                continue;\n            } else {\n                currentList = listFromBlock(block, i, mode);\n                tree.push(currentList);\n                continue;\n            }\n        }\n        console.warn(\"Unknown state encountered for block\", block);\n        tree.push(block);\n    }\n    return tree;\n}\nfunction blockMatchesList(block, list) {\n    return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n    return {\n        _type: \"@list\",\n        _key: \"\".concat(block._key || \"\".concat(index), \"-parent\"),\n        mode,\n        level: block.level || 1,\n        listItem: block.listItem,\n        children: [\n            block\n        ]\n    };\n}\nfunction findListMatching(rootNode, matching) {\n    const level = matching.level || 1;\n    const style = matching.listItem || \"normal\";\n    const filterOnType = typeof matching.listItem === \"string\";\n    if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) {\n        return rootNode;\n    }\n    if (!(\"children\" in rootNode)) {\n        return void 0;\n    }\n    const node = rootNode.children[rootNode.children.length - 1];\n    return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nconst leadingSpace = /^\\s/;\nconst trailingSpace = /^\\s/;\nfunction toPlainText(block) {\n    const blocks = Array.isArray(block) ? block : [\n        block\n    ];\n    let text = \"\";\n    blocks.forEach((current, index)=>{\n        if (!isPortableTextBlock(current)) {\n            return;\n        }\n        let pad = false;\n        current.children.forEach((span)=>{\n            if (isPortableTextSpan(span)) {\n                text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\";\n                text += span.text;\n                pad = false;\n            } else {\n                pad = true;\n            }\n        });\n        if (index !== blocks.length - 1) {\n            text += \"\\n\\n\";\n        }\n    });\n    return text;\n}\nfunction spanToPlainText(span) {\n    let text = \"\";\n    span.children.forEach((current)=>{\n        if (isPortableTextToolkitTextNode(current)) {\n            text += current.text;\n        } else if (isPortableTextToolkitSpan(current)) {\n            text += spanToPlainText(current);\n        }\n    });\n    return text;\n}\nconst LIST_NEST_MODE_HTML = \"html\";\nconst LIST_NEST_MODE_DIRECT = \"direct\";\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC90b29sa2l0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLFFBQVFDLENBQUMsRUFBRUMsQ0FBQztJQUFJLElBQUlDLElBQUlDLE9BQU9DLElBQUksQ0FBQ0o7SUFBSSxJQUFJRyxPQUFPRSxxQkFBcUIsRUFBRTtRQUFFLElBQUlDLElBQUlILE9BQU9FLHFCQUFxQixDQUFDTDtRQUFJQyxLQUFNSyxDQUFBQSxJQUFJQSxFQUFFQyxNQUFNLENBQUMsU0FBVU4sQ0FBQztZQUFJLE9BQU9FLE9BQU9LLHdCQUF3QixDQUFDUixHQUFHQyxHQUFHUSxVQUFVO1FBQUUsRUFBQyxHQUFJUCxFQUFFUSxJQUFJLENBQUNDLEtBQUssQ0FBQ1QsR0FBR0k7SUFBSTtJQUFFLE9BQU9KO0FBQUc7QUFDOVAsU0FBU1UsY0FBY1osQ0FBQztJQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJWSxVQUFVQyxNQUFNLEVBQUViLElBQUs7UUFBRSxJQUFJQyxJQUFJLFFBQVFXLFNBQVMsQ0FBQ1osRUFBRSxHQUFHWSxTQUFTLENBQUNaLEVBQUUsR0FBRyxDQUFDO1FBQUdBLElBQUksSUFBSUYsUUFBUUksT0FBT0QsSUFBSSxDQUFDLEdBQUdhLE9BQU8sQ0FBQyxTQUFVZCxDQUFDO1lBQUllLGdCQUFnQmhCLEdBQUdDLEdBQUdDLENBQUMsQ0FBQ0QsRUFBRTtRQUFHLEtBQUtFLE9BQU9jLHlCQUF5QixHQUFHZCxPQUFPZSxnQkFBZ0IsQ0FBQ2xCLEdBQUdHLE9BQU9jLHlCQUF5QixDQUFDZixNQUFNSCxRQUFRSSxPQUFPRCxJQUFJYSxPQUFPLENBQUMsU0FBVWQsQ0FBQztZQUFJRSxPQUFPZ0IsY0FBYyxDQUFDbkIsR0FBR0MsR0FBR0UsT0FBT0ssd0JBQXdCLENBQUNOLEdBQUdEO1FBQUs7SUFBSTtJQUFFLE9BQU9EO0FBQUc7QUFDdGIsU0FBU2dCLGdCQUFnQkksR0FBRyxF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QUFJMUQsVUFBVW9DLE9BQU90RixNQUFNLEdBQUcsR0FBRztZQUMvQjRCLFFBQVE7UUFDVjtJQUNGO0lBQ0EsT0FBT0E7QUFDVDtBQUNBLFNBQVNrRixnQkFBZ0JoRSxJQUFJO0lBQzNCLElBQUlsQixPQUFPO0lBQ1hrQixLQUFLUixRQUFRLENBQUNyQyxPQUFPLENBQUMwRyxDQUFBQTtRQUNwQixJQUFJNUQsOEJBQThCNEQsVUFBVTtZQUMxQy9FLFFBQVErRSxRQUFRL0UsSUFBSTtRQUN0QixPQUFPLElBQUlpQiwwQkFBMEI4RCxVQUFVO1lBQzdDL0UsUUFBUWtGLGdCQUFnQkg7UUFDMUI7SUFDRjtJQUNBLE9BQU8vRTtBQUNUO0FBQ0EsTUFBTW1GLHNCQUFzQjtBQUM1QixNQUFNQyx3QkFBd0I7QUFDbVEsQ0FDalMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2xpLWNyb3NzbGFuZC12aWRlb2dyYXBoeS8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L3Rvb2xraXQvZGlzdC9pbmRleC5qcz9iMDRjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKHR5cGVvZiByZXMgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuZnVuY3Rpb24gaXNQb3J0YWJsZVRleHRTcGFuKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX3R5cGUgPT09IFwic3BhblwiICYmIFwidGV4dFwiIGluIG5vZGUgJiYgdHlwZW9mIG5vZGUudGV4dCA9PT0gXCJzdHJpbmdcIiAmJiAodHlwZW9mIG5vZGUubWFya3MgPT09IFwidW5kZWZpbmVkXCIgfHwgQXJyYXkuaXNBcnJheShub2RlLm1hcmtzKSAmJiBub2RlLm1hcmtzLmV2ZXJ5KG1hcmsgPT4gdHlwZW9mIG1hcmsgPT09IFwic3RyaW5nXCIpKTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFibGVUZXh0QmxvY2sobm9kZSkge1xuICByZXR1cm4gKFxuICAgIC8vIEEgYmxvY2sgZG9lc24ndCBfaGF2ZV8gdG8gYmUgbmFtZWQgJ2Jsb2NrJyAtIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlblxuICAgIC8vIGFsbG93ZWQgY2hpbGQgdHlwZXMgYW5kIG1hcmtzLCBvbmUgbWlnaHQgbmFtZSB0aGVtIGRpZmZlcmVudGx5XG4gICAgdHlwZW9mIG5vZGUuX3R5cGUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAvLyBUb29sa2l0LXR5cGVzIGxpa2UgbmVzdGVkIHNwYW5zIGFyZSBALXByZWZpeGVkXG4gICAgbm9kZS5fdHlwZVswXSAhPT0gXCJAXCIgJiYgKFxuICAgIC8vIGBtYXJrRGVmc2AgaXNuJ3QgX3JlcXVpcmVkXyBwZXIgc2F5LCBidXQgaWYgaXQncyB0aGVyZSwgaXQgbmVlZHMgdG8gYmUgYW4gYXJyYXlcbiAgICAhKFwibWFya0RlZnNcIiBpbiBub2RlKSB8fCAhbm9kZS5tYXJrRGVmcyB8fCBBcnJheS5pc0FycmF5KG5vZGUubWFya0RlZnMpICYmXG4gICAgLy8gRXZlcnkgbWFyayBkZWZpbml0aW9uIG5lZWRzIHRvIGhhdmUgYW4gYF9rZXlgIHRvIGJlIG1hcHBhYmxlIGluIGNoaWxkIHNwYW5zXG4gICAgbm9kZS5tYXJrRGVmcy5ldmVyeShkZWYgPT4gdHlwZW9mIGRlZi5fa2V5ID09PSBcInN0cmluZ1wiKSkgJiZcbiAgICAvLyBgY2hpbGRyZW5gIGlzIHJlcXVpcmVkIGFuZCBuZWVkcyB0byBiZSBhbiBhcnJheVxuICAgIFwiY2hpbGRyZW5cIiBpbiBub2RlICYmIEFycmF5LmlzQXJyYXkobm9kZS5jaGlsZHJlbikgJiZcbiAgICAvLyBBbGwgY2hpbGRyZW4gYXJlIG9iamVjdHMgd2l0aCBgX3R5cGVgICh1c3VhbGx5IHNwYW5zLCBidXQgY2FuIGNvbnRhaW4gb3RoZXIgc3R1ZmYpXG4gICAgbm9kZS5jaGlsZHJlbi5ldmVyeShjaGlsZCA9PiB0eXBlb2YgY2hpbGQgPT09IFwib2JqZWN0XCIgJiYgXCJfdHlwZVwiIGluIGNoaWxkKVxuICApO1xufVxuZnVuY3Rpb24gaXNQb3J0YWJsZVRleHRMaXN0SXRlbUJsb2NrKGJsb2NrKSB7XG4gIHJldHVybiBpc1BvcnRhYmxlVGV4dEJsb2NrKGJsb2NrKSAmJiBcImxpc3RJdGVtXCIgaW4gYmxvY2sgJiYgdHlwZW9mIGJsb2NrLmxpc3RJdGVtID09PSBcInN0cmluZ1wiICYmICh0eXBlb2YgYmxvY2subGV2ZWwgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIGJsb2NrLmxldmVsID09PSBcIm51bWJlclwiKTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFibGVUZXh0VG9vbGtpdExpc3QoYmxvY2spIHtcbiAgcmV0dXJuIGJsb2NrLl90eXBlID09PSBcIkBsaXN0XCI7XG59XG5mdW5jdGlvbiBpc1BvcnRhYmxlVGV4dFRvb2xraXRTcGFuKHNwYW4pIHtcbiAgcmV0dXJuIHNwYW4uX3R5cGUgPT09IFwiQHNwYW5cIjtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFibGVUZXh0VG9vbGtpdFRleHROb2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX3R5cGUgPT09IFwiQHRleHRcIjtcbn1cbmNvbnN0IGtub3duRGVjb3JhdG9ycyA9IFtcInN0cm9uZ1wiLCBcImVtXCIsIFwiY29kZVwiLCBcInVuZGVybGluZVwiLCBcInN0cmlrZS10aHJvdWdoXCJdO1xuZnVuY3Rpb24gc29ydE1hcmtzQnlPY2N1cmVuY2VzKHNwYW4sIGluZGV4LCBibG9ja0NoaWxkcmVuKSB7XG4gIGlmICghaXNQb3J0YWJsZVRleHRTcGFuKHNwYW4pIHx8ICFzcGFuLm1hcmtzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmICghc3Bhbi5tYXJrcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgbWFya3MgPSBzcGFuLm1hcmtzLnNsaWNlKCk7XG4gIGNvbnN0IG9jY3VyZW5jZXMgPSB7fTtcbiAgbWFya3MuZm9yRWFjaChtYXJrID0+IHtcbiAgICBvY2N1cmVuY2VzW21hcmtdID0gMTtcbiAgICBmb3IgKGxldCBzaWJsaW5nSW5kZXggPSBpbmRleCArIDE7IHNpYmxpbmdJbmRleCA8IGJsb2NrQ2hpbGRyZW4ubGVuZ3RoOyBzaWJsaW5nSW5kZXgrKykge1xuICAgICAgY29uc3Qgc2libGluZyA9IGJsb2NrQ2hpbGRyZW5bc2libGluZ0luZGV4XTtcbiAgICAgIGlmIChzaWJsaW5nICYmIGlzUG9ydGFibGVUZXh0U3BhbihzaWJsaW5nKSAmJiBBcnJheS5pc0FycmF5KHNpYmxpbmcubWFya3MpICYmIHNpYmxpbmcubWFya3MuaW5kZXhPZihtYXJrKSAhPT0gLTEpIHtcbiAgICAgICAgb2NjdXJlbmNlc1ttYXJrXSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1hcmtzLnNvcnQoKG1hcmtBLCBtYXJrQikgPT4gc29ydE1hcmtzKG9jY3VyZW5jZXMsIG1hcmtBLCBtYXJrQikpO1xufVxuZnVuY3Rpb24gc29ydE1hcmtzKG9jY3VyZW5jZXMsIG1hcmtBLCBtYXJrQikge1xuICBjb25zdCBhT2NjdXJlbmNlcyA9IG9jY3VyZW5jZXNbbWFya0FdO1xuICBjb25zdCBiT2NjdXJlbmNlcyA9IG9jY3VyZW5jZXNbbWFya0JdO1xuICBpZiAoYU9jY3VyZW5jZXMgIT09IGJPY2N1cmVuY2VzKSB7XG4gICAgcmV0dXJuIGJPY2N1cmVuY2VzIC0gYU9jY3VyZW5jZXM7XG4gIH1cbiAgY29uc3QgYUtub3duUG9zID0ga25vd25EZWNvcmF0b3JzLmluZGV4T2YobWFya0EpO1xuICBjb25zdCBiS25vd25Qb3MgPSBrbm93bkRlY29yYXRvcnMuaW5kZXhPZihtYXJrQik7XG4gIGlmIChhS25vd25Qb3MgIT09IGJLbm93blBvcykge1xuICAgIHJldHVybiBhS25vd25Qb3MgLSBiS25vd25Qb3M7XG4gIH1cbiAgcmV0dXJuIG1hcmtBLmxvY2FsZUNvbXBhcmUobWFya0IpO1xufVxuZnVuY3Rpb24gYnVpbGRNYXJrc1RyZWUoYmxvY2spIHtcbiAgdmFyIF9hO1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbWFya0RlZnMgPSBbXVxuICB9ID0gYmxvY2s7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBzb3J0ZWRNYXJrcyA9IGNoaWxkcmVuLm1hcChzb3J0TWFya3NCeU9jY3VyZW5jZXMpO1xuICBjb25zdCByb290Tm9kZSA9IHtcbiAgICBfdHlwZTogXCJAc3BhblwiLFxuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBtYXJrVHlwZTogXCI8dW5rbm93bj5cIlxuICB9O1xuICBsZXQgbm9kZVN0YWNrID0gW3Jvb3ROb2RlXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNwYW4gPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoIXNwYW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBtYXJrc05lZWRlZCA9IHNvcnRlZE1hcmtzW2ldIHx8IFtdO1xuICAgIGxldCBwb3MgPSAxO1xuICAgIGlmIChub2RlU3RhY2subGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChwb3M7IHBvcyA8IG5vZGVTdGFjay5sZW5ndGg7IHBvcysrKSB7XG4gICAgICAgIGNvbnN0IG1hcmsgPSAoKF9hID0gbm9kZVN0YWNrW3Bvc10pID09IG51bGwgPyB2b2lkIDAgOiBfYS5tYXJrS2V5KSB8fCBcIlwiO1xuICAgICAgICBjb25zdCBpbmRleCA9IG1hcmtzTmVlZGVkLmluZGV4T2YobWFyayk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtYXJrc05lZWRlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlU3RhY2sgPSBub2RlU3RhY2suc2xpY2UoMCwgcG9zKTtcbiAgICBsZXQgY3VycmVudE5vZGUgPSBub2RlU3RhY2tbbm9kZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGlmICghY3VycmVudE5vZGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1hcmtLZXkgb2YgbWFya3NOZWVkZWQpIHtcbiAgICAgIGNvbnN0IG1hcmtEZWYgPSBtYXJrRGVmcy5maW5kKGRlZiA9PiBkZWYuX2tleSA9PT0gbWFya0tleSk7XG4gICAgICBjb25zdCBtYXJrVHlwZSA9IG1hcmtEZWYgPyBtYXJrRGVmLl90eXBlIDogbWFya0tleTtcbiAgICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICAgIF90eXBlOiBcIkBzcGFuXCIsXG4gICAgICAgIF9rZXk6IHNwYW4uX2tleSxcbiAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICBtYXJrRGVmLFxuICAgICAgICBtYXJrVHlwZSxcbiAgICAgICAgbWFya0tleVxuICAgICAgfTtcbiAgICAgIGN1cnJlbnROb2RlLmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICBub2RlU3RhY2sucHVzaChub2RlKTtcbiAgICAgIGN1cnJlbnROb2RlID0gbm9kZTtcbiAgICB9XG4gICAgaWYgKGlzUG9ydGFibGVUZXh0U3BhbihzcGFuKSkge1xuICAgICAgY29uc3QgbGluZXMgPSBzcGFuLnRleHQuc3BsaXQoXCJcXG5cIik7XG4gICAgICBmb3IgKGxldCBsaW5lID0gbGluZXMubGVuZ3RoOyBsaW5lLS0gPiAxOykge1xuICAgICAgICBsaW5lcy5zcGxpY2UobGluZSwgMCwgXCJcXG5cIik7XG4gICAgICB9XG4gICAgICBjdXJyZW50Tm9kZS5jaGlsZHJlbiA9IGN1cnJlbnROb2RlLmNoaWxkcmVuLmNvbmNhdChsaW5lcy5tYXAodGV4dCA9PiAoe1xuICAgICAgICBfdHlwZTogXCJAdGV4dFwiLFxuICAgICAgICB0ZXh0XG4gICAgICB9KSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZS5jaGlsZHJlbiA9IGN1cnJlbnROb2RlLmNoaWxkcmVuLmNvbmNhdChzcGFuKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJvb3ROb2RlLmNoaWxkcmVuO1xufVxuZnVuY3Rpb24gbmVzdExpc3RzKGJsb2NrcywgbW9kZSkge1xuICBjb25zdCB0cmVlID0gW107XG4gIGxldCBjdXJyZW50TGlzdDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBibG9jayA9IGJsb2Nrc1tpXTtcbiAgICBpZiAoIWJsb2NrKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCFpc1BvcnRhYmxlVGV4dExpc3RJdGVtQmxvY2soYmxvY2spKSB7XG4gICAgICB0cmVlLnB1c2goYmxvY2spO1xuICAgICAgY3VycmVudExpc3QgPSB2b2lkIDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCFjdXJyZW50TGlzdCkge1xuICAgICAgY3VycmVudExpc3QgPSBsaXN0RnJvbUJsb2NrKGJsb2NrLCBpLCBtb2RlKTtcbiAgICAgIHRyZWUucHVzaChjdXJyZW50TGlzdCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGJsb2NrTWF0Y2hlc0xpc3QoYmxvY2ssIGN1cnJlbnRMaXN0KSkge1xuICAgICAgY3VycmVudExpc3QuY2hpbGRyZW4ucHVzaChibG9jayk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKChibG9jay5sZXZlbCB8fCAxKSA+IGN1cnJlbnRMaXN0LmxldmVsKSB7XG4gICAgICBjb25zdCBuZXdMaXN0ID0gbGlzdEZyb21CbG9jayhibG9jaywgaSwgbW9kZSk7XG4gICAgICBpZiAobW9kZSA9PT0gXCJodG1sXCIpIHtcbiAgICAgICAgY29uc3QgbGFzdExpc3RJdGVtID0gY3VycmVudExpc3QuY2hpbGRyZW5bY3VycmVudExpc3QuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld0xhc3RDaGlsZCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbGFzdExpc3RJdGVtKSwge30sIHtcbiAgICAgICAgICBjaGlsZHJlbjogWy4uLmxhc3RMaXN0SXRlbS5jaGlsZHJlbiwgbmV3TGlzdF1cbiAgICAgICAgfSk7XG4gICAgICAgIGN1cnJlbnRMaXN0LmNoaWxkcmVuW2N1cnJlbnRMaXN0LmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbmV3TGFzdENoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudExpc3QuY2hpbGRyZW4ucHVzaChuZXdMaXN0KTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRMaXN0ID0gbmV3TGlzdDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoKGJsb2NrLmxldmVsIHx8IDEpIDwgY3VycmVudExpc3QubGV2ZWwpIHtcbiAgICAgIGNvbnN0IG1hdGNoaW5nQnJhbmNoID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaGluZ0JyYW5jaCAmJiBmaW5kTGlzdE1hdGNoaW5nKG1hdGNoaW5nQnJhbmNoLCBibG9jayk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY3VycmVudExpc3QgPSBtYXRjaDtcbiAgICAgICAgY3VycmVudExpc3QuY2hpbGRyZW4ucHVzaChibG9jayk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY3VycmVudExpc3QgPSBsaXN0RnJvbUJsb2NrKGJsb2NrLCBpLCBtb2RlKTtcbiAgICAgIHRyZWUucHVzaChjdXJyZW50TGlzdCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLmxpc3RJdGVtICE9PSBjdXJyZW50TGlzdC5saXN0SXRlbSkge1xuICAgICAgY29uc3QgbWF0Y2hpbmdCcmFuY2ggPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICBjb25zdCBtYXRjaCA9IG1hdGNoaW5nQnJhbmNoICYmIGZpbmRMaXN0TWF0Y2hpbmcobWF0Y2hpbmdCcmFuY2gsIHtcbiAgICAgICAgbGV2ZWw6IGJsb2NrLmxldmVsIHx8IDFcbiAgICAgIH0pO1xuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmxpc3RJdGVtID09PSBibG9jay5saXN0SXRlbSkge1xuICAgICAgICBjdXJyZW50TGlzdCA9IG1hdGNoO1xuICAgICAgICBjdXJyZW50TGlzdC5jaGlsZHJlbi5wdXNoKGJsb2NrKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50TGlzdCA9IGxpc3RGcm9tQmxvY2soYmxvY2ssIGksIG1vZGUpO1xuICAgICAgICB0cmVlLnB1c2goY3VycmVudExpc3QpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS53YXJuKFwiVW5rbm93biBzdGF0ZSBlbmNvdW50ZXJlZCBmb3IgYmxvY2tcIiwgYmxvY2spO1xuICAgIHRyZWUucHVzaChibG9jayk7XG4gIH1cbiAgcmV0dXJuIHRyZWU7XG59XG5mdW5jdGlvbiBibG9ja01hdGNoZXNMaXN0KGJsb2NrLCBsaXN0KSB7XG4gIHJldHVybiAoYmxvY2subGV2ZWwgfHwgMSkgPT09IGxpc3QubGV2ZWwgJiYgYmxvY2subGlzdEl0ZW0gPT09IGxpc3QubGlzdEl0ZW07XG59XG5mdW5jdGlvbiBsaXN0RnJvbUJsb2NrKGJsb2NrLCBpbmRleCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIF90eXBlOiBcIkBsaXN0XCIsXG4gICAgX2tleTogXCJcIi5jb25jYXQoYmxvY2suX2tleSB8fCBcIlwiLmNvbmNhdChpbmRleCksIFwiLXBhcmVudFwiKSxcbiAgICBtb2RlLFxuICAgIGxldmVsOiBibG9jay5sZXZlbCB8fCAxLFxuICAgIGxpc3RJdGVtOiBibG9jay5saXN0SXRlbSxcbiAgICBjaGlsZHJlbjogW2Jsb2NrXVxuICB9O1xufVxuZnVuY3Rpb24gZmluZExpc3RNYXRjaGluZyhyb290Tm9kZSwgbWF0Y2hpbmcpIHtcbiAgY29uc3QgbGV2ZWwgPSBtYXRjaGluZy5sZXZlbCB8fCAxO1xuICBjb25zdCBzdHlsZSA9IG1hdGNoaW5nLmxpc3RJdGVtIHx8IFwibm9ybWFsXCI7XG4gIGNvbnN0IGZpbHRlck9uVHlwZSA9IHR5cGVvZiBtYXRjaGluZy5saXN0SXRlbSA9PT0gXCJzdHJpbmdcIjtcbiAgaWYgKGlzUG9ydGFibGVUZXh0VG9vbGtpdExpc3Qocm9vdE5vZGUpICYmIChyb290Tm9kZS5sZXZlbCB8fCAxKSA9PT0gbGV2ZWwgJiYgZmlsdGVyT25UeXBlICYmIChyb290Tm9kZS5saXN0SXRlbSB8fCBcIm5vcm1hbFwiKSA9PT0gc3R5bGUpIHtcbiAgICByZXR1cm4gcm9vdE5vZGU7XG4gIH1cbiAgaWYgKCEoXCJjaGlsZHJlblwiIGluIHJvb3ROb2RlKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3Qgbm9kZSA9IHJvb3ROb2RlLmNoaWxkcmVuW3Jvb3ROb2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbm9kZSAmJiAhaXNQb3J0YWJsZVRleHRTcGFuKG5vZGUpID8gZmluZExpc3RNYXRjaGluZyhub2RlLCBtYXRjaGluZykgOiB2b2lkIDA7XG59XG5jb25zdCBsZWFkaW5nU3BhY2UgPSAvXlxccy87XG5jb25zdCB0cmFpbGluZ1NwYWNlID0gL15cXHMvO1xuZnVuY3Rpb24gdG9QbGFpblRleHQoYmxvY2spIHtcbiAgY29uc3QgYmxvY2tzID0gQXJyYXkuaXNBcnJheShibG9jaykgPyBibG9jayA6IFtibG9ja107XG4gIGxldCB0ZXh0ID0gXCJcIjtcbiAgYmxvY2tzLmZvckVhY2goKGN1cnJlbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCFpc1BvcnRhYmxlVGV4dEJsb2NrKGN1cnJlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYWQgPSBmYWxzZTtcbiAgICBjdXJyZW50LmNoaWxkcmVuLmZvckVhY2goc3BhbiA9PiB7XG4gICAgICBpZiAoaXNQb3J0YWJsZVRleHRTcGFuKHNwYW4pKSB7XG4gICAgICAgIHRleHQgKz0gcGFkICYmIHRleHQgJiYgIXRyYWlsaW5nU3BhY2UudGVzdCh0ZXh0KSAmJiAhbGVhZGluZ1NwYWNlLnRlc3Qoc3Bhbi50ZXh0KSA/IFwiIFwiIDogXCJcIjtcbiAgICAgICAgdGV4dCArPSBzcGFuLnRleHQ7XG4gICAgICAgIHBhZCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5kZXggIT09IGJsb2Nrcy5sZW5ndGggLSAxKSB7XG4gICAgICB0ZXh0ICs9IFwiXFxuXFxuXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRleHQ7XG59XG5mdW5jdGlvbiBzcGFuVG9QbGFpblRleHQoc3Bhbikge1xuICBsZXQgdGV4dCA9IFwiXCI7XG4gIHNwYW4uY2hpbGRyZW4uZm9yRWFjaChjdXJyZW50ID0+IHtcbiAgICBpZiAoaXNQb3J0YWJsZVRleHRUb29sa2l0VGV4dE5vZGUoY3VycmVudCkpIHtcbiAgICAgIHRleHQgKz0gY3VycmVudC50ZXh0O1xuICAgIH0gZWxzZSBpZiAoaXNQb3J0YWJsZVRleHRUb29sa2l0U3BhbihjdXJyZW50KSkge1xuICAgICAgdGV4dCArPSBzcGFuVG9QbGFpblRleHQoY3VycmVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRleHQ7XG59XG5jb25zdCBMSVNUX05FU1RfTU9ERV9IVE1MID0gXCJodG1sXCI7XG5jb25zdCBMSVNUX05FU1RfTU9ERV9ESVJFQ1QgPSBcImRpcmVjdFwiO1xuZXhwb3J0IHsgTElTVF9ORVNUX01PREVfRElSRUNULCBMSVNUX05FU1RfTU9ERV9IVE1MLCBidWlsZE1hcmtzVHJlZSwgaXNQb3J0YWJsZVRleHRCbG9jaywgaXNQb3J0YWJsZVRleHRMaXN0SXRlbUJsb2NrLCBpc1BvcnRhYmxlVGV4dFNwYW4sIGlzUG9ydGFibGVUZXh0VG9vbGtpdExpc3QsIGlzUG9ydGFibGVUZXh0VG9vbGtpdFNwYW4sIGlzUG9ydGFibGVUZXh0VG9vbGtpdFRleHROb2RlLCBuZXN0TGlzdHMsIHNvcnRNYXJrc0J5T2NjdXJlbmNlcywgc3BhblRvUGxhaW5UZXh0LCB0b1BsYWluVGV4dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJpc1BvcnRhYmxlVGV4dFNwYW4iLCJub2RlIiwiX3R5cGUiLCJ0ZXh0IiwibWFya3MiLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsIm1hcmsiLCJpc1BvcnRhYmxlVGV4dEJsb2NrIiwibWFya0RlZnMiLCJkZWYiLCJfa2V5IiwiY2hpbGRyZW4iLCJjaGlsZCIsImlzUG9ydGFibGVUZXh0TGlzdEl0ZW1CbG9jayIsImJsb2NrIiwibGlzdEl0ZW0iLCJsZXZlbCIsImlzUG9ydGFibGVUZXh0VG9vbGtpdExpc3QiLCJpc1BvcnRhYmxlVGV4dFRvb2xraXRTcGFuIiwic3BhbiIsImlzUG9ydGFibGVUZXh0VG9vbGtpdFRleHROb2RlIiwia25vd25EZWNvcmF0b3JzIiwic29ydE1hcmtzQnlPY2N1cmVuY2VzIiwiaW5kZXgiLCJibG9ja0NoaWxkcmVuIiwic2xpY2UiLCJvY2N1cmVuY2VzIiwic2libGluZ0luZGV4Iiwic2libGluZyIsImluZGV4T2YiLCJzb3J0IiwibWFya0EiLCJtYXJrQiIsInNvcnRNYXJrcyIsImFPY2N1cmVuY2VzIiwiYk9jY3VyZW5jZXMiLCJhS25vd25Qb3MiLCJiS25vd25Qb3MiLCJsb2NhbGVDb21wYXJlIiwiYnVpbGRNYXJrc1RyZWUiLCJfYSIsInNvcnRlZE1hcmtzIiwibWFwIiwicm9vdE5vZGUiLCJtYXJrVHlwZSIsIm5vZGVTdGFjayIsImkiLCJtYXJrc05lZWRlZCIsInBvcyIsIm1hcmtLZXkiLCJzcGxpY2UiLCJjdXJyZW50Tm9kZSIsIm1hcmtEZWYiLCJmaW5kIiwibGluZXMiLCJzcGxpdCIsImxpbmUiLCJjb25jYXQiLCJuZXN0TGlzdHMiLCJibG9ja3MiLCJtb2RlIiwidHJlZSIsImN1cnJlbnRMaXN0IiwibGlzdEZyb21CbG9jayIsImJsb2NrTWF0Y2hlc0xpc3QiLCJuZXdMaXN0IiwibGFzdExpc3RJdGVtIiwibmV3TGFzdENoaWxkIiwibWF0Y2hpbmdCcmFuY2giLCJtYXRjaCIsImZpbmRMaXN0TWF0Y2hpbmciLCJjb25zb2xlIiwid2FybiIsImxpc3QiLCJtYXRjaGluZyIsInN0eWxlIiwiZmlsdGVyT25UeXBlIiwibGVhZGluZ1NwYWNlIiwidHJhaWxpbmdTcGFjZSIsInRvUGxhaW5UZXh0IiwiY3VycmVudCIsInBhZCIsInRlc3QiLCJzcGFuVG9QbGFpblRleHQiLCJMSVNUX05FU1RfTU9ERV9IVE1MIiwiTElTVF9ORVNUX01PREVfRElSRUNUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;