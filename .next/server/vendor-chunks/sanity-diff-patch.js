"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sanity-diff-patch";
exports.ids = ["vendor-chunks/sanity-diff-patch"];
exports.modules = {

/***/ "(ssr)/./node_modules/sanity-diff-patch/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/sanity-diff-patch/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffError: () => (/* binding */ DiffError),\n/* harmony export */   diffItem: () => (/* binding */ diffItem),\n/* harmony export */   diffPatch: () => (/* binding */ diffPatch)\n/* harmony export */ });\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\nfunction pathToString(path) {\n    return path.reduce((target, segment, i)=>{\n        if (Array.isArray(segment)) {\n            return \"\".concat(target, \"[\").concat(segment.join(\":\"), \"]\");\n        }\n        if (isKeyedObject(segment)) {\n            return \"\".concat(target, '[_key==\"').concat(segment._key, '\"]');\n        }\n        if (typeof segment === \"number\") {\n            return \"\".concat(target, \"[\").concat(segment, \"]\");\n        } else if (typeof segment === \"string\" && /^\\d+$/.test(segment)) {\n            return \"\".concat(target, '[\"').concat(segment, '\"]');\n        }\n        if (typeof segment === \"string\") {\n            const separator = i === 0 ? \"\" : \".\";\n            return \"\".concat(target).concat(separator).concat(segment);\n        }\n        throw new Error('Unsupported path segment \"'.concat(segment, '\"'));\n    }, \"\");\n}\nfunction isKeyedObject(obj) {\n    return typeof obj === \"object\" && typeof obj._key === \"string\";\n}\nclass DiffError extends Error {\n    constructor(message, path, value){\n        const serializedPath = pathToString(path);\n        super(\"\".concat(message, \" (at '\").concat(serializedPath, \"')\"));\n        this.path = path;\n        this.serializedPath = serializedPath;\n        this.value = value;\n    }\n}\nconst idPattern = /^[a-z0-9][a-z0-9_.-]+$/i;\nconst propPattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\nconst propStartPattern = /^[a-z_]/i;\nfunction validateProperty(property, value, path) {\n    if (!propStartPattern.test(property)) {\n        throw new DiffError(\"Keys must start with a letter (a-z)\", path.concat(property), value);\n    }\n    if (!propPattern.test(property)) {\n        throw new DiffError(\"Keys can only contain letters, numbers and underscores\", path.concat(property), value);\n    }\n    if (property === \"_key\" || property === \"_ref\" || property === \"_type\") {\n        if (typeof value !== \"string\") {\n            throw new DiffError(\"Keys must be strings\", path.concat(property), value);\n        }\n        if (!idPattern.test(value)) {\n            throw new DiffError(\"Invalid key - use less exotic characters\", path.concat(property), value);\n        }\n    }\n    return property;\n}\nconst ignoredKeys = [\n    \"_id\",\n    \"_type\",\n    \"_createdAt\",\n    \"_updatedAt\",\n    \"_rev\"\n];\nconst defaultOptions = {\n    hideWarnings: false,\n    diffMatchPatch: {\n        enabled: true,\n        // Only use diff-match-patch if target string is longer than this threshold\n        lengthThresholdAbsolute: 30,\n        // Only use generated diff-match-patch if the patch length is less than or equal to\n        // (targetString * relative). Example: A 100 character target with a relative factor\n        // of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n        // it will fall back to a regular `set` patch.\n        lengthThresholdRelative: 1.2\n    }\n};\nfunction mergeOptions(options) {\n    return {\n        ...defaultOptions,\n        ...options,\n        diffMatchPatch: {\n            ...defaultOptions.diffMatchPatch,\n            ...options.diffMatchPatch || {}\n        }\n    };\n}\nfunction diffPatch(itemA, itemB, opts) {\n    const options = mergeOptions(opts || {});\n    const id = options.id || itemA._id === itemB._id && itemA._id;\n    const revisionLocked = options.ifRevisionID;\n    const ifRevisionID = typeof revisionLocked === \"boolean\" ? itemA._rev : revisionLocked;\n    const basePath = options.basePath || [];\n    if (!id) {\n        throw new Error(\"_id on itemA and itemB not present or differs, specify document id the mutations should be applied to\");\n    }\n    if (revisionLocked === true && !ifRevisionID) {\n        throw new Error(\"`ifRevisionID` is set to `true`, but no `_rev` was passed in item A. Either explicitly set `ifRevisionID` to a revision, or pass `_rev` as part of item A.\");\n    }\n    if (basePath.length === 0 && itemA._type !== itemB._type) {\n        throw new Error(\"_type is immutable and cannot be changed (\".concat(itemA._type, \" => \").concat(itemB._type, \")\"));\n    }\n    const operations = diffItem(itemA, itemB, options, basePath, []);\n    return serializePatches(operations, {\n        id,\n        ifRevisionID: revisionLocked ? ifRevisionID : void 0\n    });\n}\nfunction diffItem(itemA, itemB) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOptions;\n    let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let patches = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    if (itemA === itemB) {\n        return patches;\n    }\n    const aType = Array.isArray(itemA) ? \"array\" : typeof itemA;\n    const bType = Array.isArray(itemB) ? \"array\" : typeof itemB;\n    const aIsUndefined = aType === \"undefined\";\n    const bIsUndefined = bType === \"undefined\";\n    if (aIsUndefined && !bIsUndefined) {\n        patches.push({\n            op: \"set\",\n            path,\n            value: itemB\n        });\n        return patches;\n    }\n    if (!aIsUndefined && bIsUndefined) {\n        patches.push({\n            op: \"unset\",\n            path\n        });\n        return patches;\n    }\n    const options = mergeOptions(opts);\n    const dataType = aIsUndefined ? bType : aType;\n    const isContainer = dataType === \"object\" || dataType === \"array\";\n    if (!isContainer) {\n        return diffPrimitive(itemA, itemB, options, path, patches);\n    }\n    if (aType !== bType) {\n        patches.push({\n            op: \"set\",\n            path,\n            value: itemB\n        });\n        return patches;\n    }\n    return dataType === \"array\" ? diffArray(itemA, itemB, options, path, patches) : diffObject(itemA, itemB, options, path, patches);\n}\nfunction diffObject(itemA, itemB, options, path, patches) {\n    const atRoot = path.length === 0;\n    const aKeys = Object.keys(itemA).filter(atRoot ? isNotIgnoredKey : yes).map((key)=>validateProperty(key, itemA[key], path));\n    const aKeysLength = aKeys.length;\n    const bKeys = Object.keys(itemB).filter(atRoot ? isNotIgnoredKey : yes).map((key)=>validateProperty(key, itemB[key], path));\n    const bKeysLength = bKeys.length;\n    for(let i = 0; i < aKeysLength; i++){\n        const key = aKeys[i];\n        if (!(key in itemB)) {\n            patches.push({\n                op: \"unset\",\n                path: path.concat(key)\n            });\n        }\n    }\n    for(let i = 0; i < bKeysLength; i++){\n        const key = bKeys[i];\n        diffItem(itemA[key], itemB[key], options, path.concat([\n            key\n        ]), patches);\n    }\n    return patches;\n}\nfunction diffArray(itemA, itemB, options, path, patches) {\n    if (itemB.length > itemA.length) {\n        patches.push({\n            op: \"insert\",\n            after: path.concat([\n                -1\n            ]),\n            items: itemB.slice(itemA.length).map((item, i)=>nullifyUndefined(item, path, i, options))\n        });\n    }\n    if (itemB.length < itemA.length) {\n        const isSingle = itemA.length - itemB.length === 1;\n        const unsetItems = itemA.slice(itemB.length);\n        if (isRevisionLocked(options) || !isUniquelyKeyed(unsetItems)) {\n            patches.push({\n                op: \"unset\",\n                path: path.concat([\n                    isSingle ? itemB.length : [\n                        itemB.length,\n                        \"\"\n                    ]\n                ])\n            });\n        } else {\n            patches.push(...unsetItems.map((item)=>({\n                    op: \"unset\",\n                    path: path.concat({\n                        _key: item._key\n                    })\n                })));\n        }\n    }\n    for(let i = 0; i < itemB.length; i++){\n        if (Array.isArray(itemB[i])) {\n            throw new DiffError(\"Multi-dimensional arrays not supported\", path.concat(i), itemB[i]);\n        }\n    }\n    const overlapping = Math.min(itemA.length, itemB.length);\n    const segmentA = itemA.slice(0, overlapping);\n    const segmentB = itemB.slice(0, overlapping);\n    return isUniquelyKeyed(segmentA) && isUniquelyKeyed(segmentB) ? diffArrayByKey(segmentA, segmentB, options, path, patches) : diffArrayByIndex(segmentA, segmentB, options, path, patches);\n}\nfunction diffArrayByIndex(itemA, itemB, options, path, patches) {\n    for(let i = 0; i < itemA.length; i++){\n        diffItem(itemA[i], nullifyUndefined(itemB[i], path, i, options), options, path.concat(i), patches);\n    }\n    return patches;\n}\nfunction diffArrayByKey(itemA, itemB, options, path, patches) {\n    const keyedA = indexByKey(itemA);\n    const keyedB = indexByKey(itemB);\n    if (!arrayIsEqual(keyedA.keys, keyedB.keys)) {\n        return diffArrayByIndex(itemA, itemB, options, path, patches);\n    }\n    for(let i = 0; i < keyedB.keys.length; i++){\n        const key = keyedB.keys[i];\n        const valueA = keyedA.index[key];\n        const valueB = nullifyUndefined(keyedB.index[key], path, i, options);\n        diffItem(valueA, valueB, options, path.concat({\n            _key: key\n        }), patches);\n    }\n    return patches;\n}\nfunction getDiffMatchPatch(itemA, itemB, options, path) {\n    const { enabled, lengthThresholdRelative, lengthThresholdAbsolute } = options.diffMatchPatch;\n    const segment = path[path.length - 1];\n    if (!enabled || // Don't use for anything but strings\n    typeof itemA !== \"string\" || typeof itemB !== \"string\" || // Don't use for `_key`, `_ref` etc\n    typeof segment === \"string\" && segment[0] === \"_\" || // Don't use on short strings\n    itemB.length < lengthThresholdAbsolute) {\n        return void 0;\n    }\n    let strPatch = \"\";\n    try {\n        const patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makeDiff)(itemA, itemB);\n        const diff = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.cleanupEfficiency)(patch);\n        strPatch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.stringifyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makePatches)(diff));\n    } catch (err) {\n        return void 0;\n    }\n    return strPatch.length > itemB.length * lengthThresholdRelative ? void 0 : {\n        op: \"diffMatchPatch\",\n        path,\n        value: strPatch\n    };\n}\nfunction diffPrimitive(itemA, itemB, options, path, patches) {\n    const dmp = getDiffMatchPatch(itemA, itemB, options, path);\n    patches.push(dmp || {\n        op: \"set\",\n        path,\n        value: itemB\n    });\n    return patches;\n}\nfunction isNotIgnoredKey(key) {\n    return ignoredKeys.indexOf(key) === -1;\n}\nfunction serializePatches(patches, options) {\n    if (patches.length === 0) {\n        return [];\n    }\n    const { id, ifRevisionID } = options;\n    const set = patches.filter((patch)=>patch.op === \"set\");\n    const unset = patches.filter((patch)=>patch.op === \"unset\");\n    const insert = patches.filter((patch)=>patch.op === \"insert\");\n    const dmp = patches.filter((patch)=>patch.op === \"diffMatchPatch\");\n    const withSet = set.length > 0 && set.reduce((patch, item)=>{\n        const path = pathToString(item.path);\n        patch.set[path] = item.value;\n        return patch;\n    }, {\n        id,\n        set: {}\n    });\n    const withUnset = unset.length > 0 && unset.reduce((patch, item)=>{\n        const path = pathToString(item.path);\n        patch.unset.push(path);\n        return patch;\n    }, {\n        id,\n        unset: []\n    });\n    const withInsert = insert.reduce((acc, item)=>{\n        const after = pathToString(item.after);\n        return acc.concat({\n            id,\n            insert: {\n                after,\n                items: item.items\n            }\n        });\n    }, []);\n    const withDmp = dmp.length > 0 && dmp.reduce((patch, item)=>{\n        const path = pathToString(item.path);\n        patch.diffMatchPatch[path] = item.value;\n        return patch;\n    }, {\n        id,\n        diffMatchPatch: {}\n    });\n    const patchSet = [\n        withSet,\n        withUnset,\n        withDmp,\n        ...withInsert\n    ].filter((item)=>item !== false);\n    return patchSet.map((patch, i)=>({\n            patch: ifRevisionID && i === 0 ? {\n                ...patch,\n                ifRevisionID\n            } : patch\n        }));\n}\nfunction isUniquelyKeyed(arr) {\n    const keys = [];\n    for(let i = 0; i < arr.length; i++){\n        const key = getKey(arr[i]);\n        if (!key || keys.indexOf(key) !== -1) {\n            return false;\n        }\n        keys.push(key);\n    }\n    return true;\n}\nfunction getKey(obj) {\n    return typeof obj === \"object\" && obj !== null && obj._key;\n}\nfunction indexByKey(arr) {\n    return arr.reduce((acc, item)=>{\n        acc.keys.push(item._key);\n        acc.index[item._key] = item;\n        return acc;\n    }, {\n        keys: [],\n        index: {}\n    });\n}\nfunction arrayIsEqual(itemA, itemB) {\n    return itemA.length === itemB.length && itemA.every((item, i)=>itemB[i] === item);\n}\nfunction nullifyUndefined(item, path, index, options) {\n    if (typeof item !== \"undefined\") {\n        return item;\n    }\n    if (!options.hideWarnings) {\n        const serializedPath = pathToString(path.concat(index));\n        console.warn(\"undefined value in array converted to null (at '\".concat(serializedPath, \"')\"));\n    }\n    return null;\n}\nfunction isRevisionLocked(options) {\n    return Boolean(options.ifRevisionID);\n}\nfunction yes(_) {\n    return true;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sanity-diff-patch/dist/index.js\n");

/***/ })

};
;