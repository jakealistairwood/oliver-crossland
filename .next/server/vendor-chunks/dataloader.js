"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dataloader";
exports.ids = ["vendor-chunks/dataloader"];
exports.modules = {

/***/ "(ssr)/./node_modules/dataloader/index.js":
/*!******************************************!*\
  !*** ./node_modules/dataloader/index.js ***!
  \******************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) 2019-present, GraphQL Foundation\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */ // A Function, which when given an Array of keys, returns a Promise of an Array\n// of values or Errors.\n// Optionally turn off batching or caching or provide a cache key function or a\n// custom cache instance.\n// If a custom cache is provided, it must be of this type (a subset of ES6 Map).\n/**\n * A `DataLoader` creates a public API for loading data from a particular\n * data back-end with unique keys such as the `id` column of a SQL table or\n * document name in a MongoDB database, given a batch loading function.\n *\n * Each `DataLoader` instance contains a unique memoized cache. Use caution when\n * used in long-lived applications or those which serve many users with\n * different access permissions and consider creating a new instance per\n * web request.\n */ var DataLoader = /*#__PURE__*/ function() {\n    function DataLoader(batchLoadFn, options) {\n        if (typeof batchLoadFn !== \"function\") {\n            throw new TypeError(\"DataLoader must be constructed with a function which accepts \" + (\"Array<key> and returns Promise<Array<value>>, but got: \" + batchLoadFn + \".\"));\n        }\n        this._batchLoadFn = batchLoadFn;\n        this._maxBatchSize = getValidMaxBatchSize(options);\n        this._batchScheduleFn = getValidBatchScheduleFn(options);\n        this._cacheKeyFn = getValidCacheKeyFn(options);\n        this._cacheMap = getValidCacheMap(options);\n        this._batch = null;\n        this.name = getValidName(options);\n    } // Private\n    var _proto = DataLoader.prototype;\n    /**\n   * Loads a key, returning a `Promise` for the value represented by that key.\n   */ _proto.load = function load(key) {\n        if (key === null || key === undefined) {\n            throw new TypeError(\"The loader.load() function must be called with a value, \" + (\"but got: \" + String(key) + \".\"));\n        }\n        var batch = getCurrentBatch(this);\n        var cacheMap = this._cacheMap;\n        var cacheKey = this._cacheKeyFn(key); // If caching and there is a cache-hit, return cached Promise.\n        if (cacheMap) {\n            var cachedPromise = cacheMap.get(cacheKey);\n            if (cachedPromise) {\n                var cacheHits = batch.cacheHits || (batch.cacheHits = []);\n                return new Promise(function(resolve) {\n                    cacheHits.push(function() {\n                        resolve(cachedPromise);\n                    });\n                });\n            }\n        } // Otherwise, produce a new Promise for this key, and enqueue it to be\n        // dispatched along with the current batch.\n        batch.keys.push(key);\n        var promise = new Promise(function(resolve, reject) {\n            batch.callbacks.push({\n                resolve: resolve,\n                reject: reject\n            });\n        }); // If caching, cache this promise.\n        if (cacheMap) {\n            cacheMap.set(cacheKey, promise);\n        }\n        return promise;\n    } /**\n   * Loads multiple keys, promising an array of values:\n   *\n   *     var [ a, b ] = await myLoader.loadMany([ 'a', 'b' ]);\n   *\n   * This is similar to the more verbose:\n   *\n   *     var [ a, b ] = await Promise.all([\n   *       myLoader.load('a'),\n   *       myLoader.load('b')\n   *     ]);\n   *\n   * However it is different in the case where any load fails. Where\n   * Promise.all() would reject, loadMany() always resolves, however each result\n   * is either a value or an Error instance.\n   *\n   *     var [ a, b, c ] = await myLoader.loadMany([ 'a', 'b', 'badkey' ]);\n   *     // c instanceof Error\n   *\n   */ ;\n    _proto.loadMany = function loadMany(keys) {\n        if (!isArrayLike(keys)) {\n            throw new TypeError(\"The loader.loadMany() function must be called with Array<key> \" + (\"but got: \" + keys + \".\"));\n        } // Support ArrayLike by using only minimal property access\n        var loadPromises = [];\n        for(var i = 0; i < keys.length; i++){\n            loadPromises.push(this.load(keys[i])[\"catch\"](function(error) {\n                return error;\n            }));\n        }\n        return Promise.all(loadPromises);\n    } /**\n   * Clears the value at `key` from the cache, if it exists. Returns itself for\n   * method chaining.\n   */ ;\n    _proto.clear = function clear(key) {\n        var cacheMap = this._cacheMap;\n        if (cacheMap) {\n            var cacheKey = this._cacheKeyFn(key);\n            cacheMap[\"delete\"](cacheKey);\n        }\n        return this;\n    } /**\n   * Clears the entire cache. To be used when some event results in unknown\n   * invalidations across this particular `DataLoader`. Returns itself for\n   * method chaining.\n   */ ;\n    _proto.clearAll = function clearAll() {\n        var cacheMap = this._cacheMap;\n        if (cacheMap) {\n            cacheMap.clear();\n        }\n        return this;\n    } /**\n   * Adds the provided key and value to the cache. If the key already\n   * exists, no change is made. Returns itself for method chaining.\n   *\n   * To prime the cache with an error at a key, provide an Error instance.\n   */ ;\n    _proto.prime = function prime(key, value) {\n        var cacheMap = this._cacheMap;\n        if (cacheMap) {\n            var cacheKey = this._cacheKeyFn(key); // Only add the key if it does not already exist.\n            if (cacheMap.get(cacheKey) === undefined) {\n                // Cache a rejected promise if the value is an Error, in order to match\n                // the behavior of load(key).\n                var promise;\n                if (value instanceof Error) {\n                    promise = Promise.reject(value); // Since this is a case where an Error is intentionally being primed\n                    // for a given key, we want to disable unhandled promise rejection.\n                    promise[\"catch\"](function() {});\n                } else {\n                    promise = Promise.resolve(value);\n                }\n                cacheMap.set(cacheKey, promise);\n            }\n        }\n        return this;\n    } /**\n   * The name given to this `DataLoader` instance. Useful for APM tools.\n   *\n   * Is `null` if not set in the constructor.\n   */ ;\n    return DataLoader;\n}(); // Private: Enqueue a Job to be executed after all \"PromiseJobs\" Jobs.\n//\n// ES6 JavaScript uses the concepts Job and JobQueue to schedule work to occur\n// after the current execution context has completed:\n// http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues\n//\n// Node.js uses the `process.nextTick` mechanism to implement the concept of a\n// Job, maintaining a global FIFO JobQueue for all Jobs, which is flushed after\n// the current call stack ends.\n//\n// When calling `then` on a Promise, it enqueues a Job on a specific\n// \"PromiseJobs\" JobQueue which is flushed in Node as a single Job on the\n// global JobQueue.\n//\n// DataLoader batches all loads which occur in a single frame of execution, but\n// should include in the batch all loads which occur during the flushing of the\n// \"PromiseJobs\" JobQueue after that same execution frame.\n//\n// In order to avoid the DataLoader dispatch Job occuring before \"PromiseJobs\",\n// A Promise Job is created with the sole purpose of enqueuing a global Job,\n// ensuring that it always occurs after \"PromiseJobs\" ends.\n//\n// Node.js's job queue is unique. Browsers do not have an equivalent mechanism\n// for enqueuing a job to be performed after promise microtasks and before the\n// next macrotask. For browser environments, a macrotask is used (via\n// setImmediate or setTimeout) at a potential performance penalty.\nvar enqueuePostPromiseJob = typeof process === \"object\" && typeof process.nextTick === \"function\" ? function(fn) {\n    if (!resolvedPromise) {\n        resolvedPromise = Promise.resolve();\n    }\n    resolvedPromise.then(function() {\n        process.nextTick(fn);\n    });\n} : typeof setImmediate === \"function\" ? function(fn) {\n    setImmediate(fn);\n} : function(fn) {\n    setTimeout(fn);\n}; // Private: cached resolved Promise instance\nvar resolvedPromise; // Private: Describes a batch of requests\n// Private: Either returns the current batch, or creates and schedules a\n// dispatch of a new batch for the given loader.\nfunction getCurrentBatch(loader) {\n    // If there is an existing batch which has not yet dispatched and is within\n    // the limit of the batch size, then return it.\n    var existingBatch = loader._batch;\n    if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader._maxBatchSize) {\n        return existingBatch;\n    } // Otherwise, create a new batch for this loader.\n    var newBatch = {\n        hasDispatched: false,\n        keys: [],\n        callbacks: []\n    }; // Store it on the loader so it may be reused.\n    loader._batch = newBatch; // Then schedule a task to dispatch this batch of requests.\n    loader._batchScheduleFn(function() {\n        dispatchBatch(loader, newBatch);\n    });\n    return newBatch;\n}\nfunction dispatchBatch(loader, batch) {\n    // Mark this batch as having been dispatched.\n    batch.hasDispatched = true; // If there's nothing to load, resolve any cache hits and return early.\n    if (batch.keys.length === 0) {\n        resolveCacheHits(batch);\n        return;\n    } // Call the provided batchLoadFn for this loader with the batch's keys and\n    // with the loader as the `this` context.\n    var batchPromise;\n    try {\n        batchPromise = loader._batchLoadFn(batch.keys);\n    } catch (e) {\n        return failedDispatch(loader, batch, new TypeError(\"DataLoader must be constructed with a function which accepts \" + \"Array<key> and returns Promise<Array<value>>, but the function \" + (\"errored synchronously: \" + String(e) + \".\")));\n    } // Assert the expected response from batchLoadFn\n    if (!batchPromise || typeof batchPromise.then !== \"function\") {\n        return failedDispatch(loader, batch, new TypeError(\"DataLoader must be constructed with a function which accepts \" + \"Array<key> and returns Promise<Array<value>>, but the function did \" + (\"not return a Promise: \" + String(batchPromise) + \".\")));\n    } // Await the resolution of the call to batchLoadFn.\n    batchPromise.then(function(values) {\n        // Assert the expected resolution from batchLoadFn.\n        if (!isArrayLike(values)) {\n            throw new TypeError(\"DataLoader must be constructed with a function which accepts \" + \"Array<key> and returns Promise<Array<value>>, but the function did \" + (\"not return a Promise of an Array: \" + String(values) + \".\"));\n        }\n        if (values.length !== batch.keys.length) {\n            throw new TypeError(\"DataLoader must be constructed with a function which accepts \" + \"Array<key> and returns Promise<Array<value>>, but the function did \" + \"not return a Promise of an Array of the same length as the Array \" + \"of keys.\" + (\"\\n\\nKeys:\\n\" + String(batch.keys)) + (\"\\n\\nValues:\\n\" + String(values)));\n        } // Resolve all cache hits in the same micro-task as freshly loaded values.\n        resolveCacheHits(batch); // Step through values, resolving or rejecting each Promise in the batch.\n        for(var i = 0; i < batch.callbacks.length; i++){\n            var value = values[i];\n            if (value instanceof Error) {\n                batch.callbacks[i].reject(value);\n            } else {\n                batch.callbacks[i].resolve(value);\n            }\n        }\n    })[\"catch\"](function(error) {\n        failedDispatch(loader, batch, error);\n    });\n} // Private: do not cache individual loads if the entire batch dispatch fails,\n// but still reject each request so they do not hang.\nfunction failedDispatch(loader, batch, error) {\n    // Cache hits are resolved, even though the batch failed.\n    resolveCacheHits(batch);\n    for(var i = 0; i < batch.keys.length; i++){\n        loader.clear(batch.keys[i]);\n        batch.callbacks[i].reject(error);\n    }\n} // Private: Resolves the Promises for any cache hits in this batch.\nfunction resolveCacheHits(batch) {\n    if (batch.cacheHits) {\n        for(var i = 0; i < batch.cacheHits.length; i++){\n            batch.cacheHits[i]();\n        }\n    }\n} // Private: given the DataLoader's options, produce a valid max batch size.\nfunction getValidMaxBatchSize(options) {\n    var shouldBatch = !options || options.batch !== false;\n    if (!shouldBatch) {\n        return 1;\n    }\n    var maxBatchSize = options && options.maxBatchSize;\n    if (maxBatchSize === undefined) {\n        return Infinity;\n    }\n    if (typeof maxBatchSize !== \"number\" || maxBatchSize < 1) {\n        throw new TypeError(\"maxBatchSize must be a positive number: \" + maxBatchSize);\n    }\n    return maxBatchSize;\n} // Private\nfunction getValidBatchScheduleFn(options) {\n    var batchScheduleFn = options && options.batchScheduleFn;\n    if (batchScheduleFn === undefined) {\n        return enqueuePostPromiseJob;\n    }\n    if (typeof batchScheduleFn !== \"function\") {\n        throw new TypeError(\"batchScheduleFn must be a function: \" + batchScheduleFn);\n    }\n    return batchScheduleFn;\n} // Private: given the DataLoader's options, produce a cache key function.\nfunction getValidCacheKeyFn(options) {\n    var cacheKeyFn = options && options.cacheKeyFn;\n    if (cacheKeyFn === undefined) {\n        return function(key) {\n            return key;\n        };\n    }\n    if (typeof cacheKeyFn !== \"function\") {\n        throw new TypeError(\"cacheKeyFn must be a function: \" + cacheKeyFn);\n    }\n    return cacheKeyFn;\n} // Private: given the DataLoader's options, produce a CacheMap to be used.\nfunction getValidCacheMap(options) {\n    var shouldCache = !options || options.cache !== false;\n    if (!shouldCache) {\n        return null;\n    }\n    var cacheMap = options && options.cacheMap;\n    if (cacheMap === undefined) {\n        return new Map();\n    }\n    if (cacheMap !== null) {\n        var cacheFunctions = [\n            \"get\",\n            \"set\",\n            \"delete\",\n            \"clear\"\n        ];\n        var missingFunctions = cacheFunctions.filter(function(fnName) {\n            return cacheMap && typeof cacheMap[fnName] !== \"function\";\n        });\n        if (missingFunctions.length !== 0) {\n            throw new TypeError(\"Custom cacheMap missing methods: \" + missingFunctions.join(\", \"));\n        }\n    }\n    return cacheMap;\n}\nfunction getValidName(options) {\n    if (options && options.name) {\n        return options.name;\n    }\n    return null;\n} // Private\nfunction isArrayLike(x) {\n    return typeof x === \"object\" && x !== null && typeof x.length === \"number\" && (x.length === 0 || x.length > 0 && Object.prototype.hasOwnProperty.call(x, x.length - 1));\n}\nmodule.exports = DataLoader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dataloader/index.js\n");

/***/ })

};
;