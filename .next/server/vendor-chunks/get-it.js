"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-it";
exports.ids = ["vendor-chunks/get-it"];
exports.modules = {

/***/ "(ssr)/./node_modules/get-it/node_modules/is-stream/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/get-it/node_modules/is-stream/index.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nconst isStream = (stream)=>stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\nisStream.writable = (stream)=>isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\nisStream.readable = (stream)=>isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\nisStream.duplex = (stream)=>isStream.writable(stream) && isStream.readable(stream);\nisStream.transform = (stream)=>isStream.duplex(stream) && typeof stream._transform === \"function\";\nmodule.exports = isStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2V0LWl0L25vZGVfbW9kdWxlcy9pcy1zdHJlYW0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxXQUFXQyxDQUFBQSxTQUNoQkEsV0FBVyxRQUNYLE9BQU9BLFdBQVcsWUFDbEIsT0FBT0EsT0FBT0MsSUFBSSxLQUFLO0FBRXhCRixTQUFTRyxRQUFRLEdBQUdGLENBQUFBLFNBQ25CRCxTQUFTQyxXQUNUQSxPQUFPRSxRQUFRLEtBQUssU0FDcEIsT0FBT0YsT0FBT0csTUFBTSxLQUFLLGNBQ3pCLE9BQU9ILE9BQU9JLGNBQWMsS0FBSztBQUVsQ0wsU0FBU00sUUFBUSxHQUFHTCxDQUFBQSxTQUNuQkQsU0FBU0MsV0FDVEEsT0FBT0ssUUFBUSxLQUFLLFNBQ3BCLE9BQU9MLE9BQU9NLEtBQUssS0FBSyxjQUN4QixPQUFPTixPQUFPTyxjQUFjLEtBQUs7QUFFbENSLFNBQVNTLE1BQU0sR0FBR1IsQ0FBQUEsU0FDakJELFNBQVNHLFFBQVEsQ0FBQ0YsV0FDbEJELFNBQVNNLFFBQVEsQ0FBQ0w7QUFFbkJELFNBQVNVLFNBQVMsR0FBR1QsQ0FBQUEsU0FDcEJELFNBQVNTLE1BQU0sQ0FBQ1IsV0FDaEIsT0FBT0EsT0FBT1UsVUFBVSxLQUFLO0FBRTlCQyxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2xpLWNyb3NzbGFuZC12aWRlb2dyYXBoeS8uL25vZGVfbW9kdWxlcy9nZXQtaXQvbm9kZV9tb2R1bGVzL2lzLXN0cmVhbS9pbmRleC5qcz8wNDEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNTdHJlYW0gPSBzdHJlYW0gPT5cblx0c3RyZWFtICE9PSBudWxsICYmXG5cdHR5cGVvZiBzdHJlYW0gPT09ICdvYmplY3QnICYmXG5cdHR5cGVvZiBzdHJlYW0ucGlwZSA9PT0gJ2Z1bmN0aW9uJztcblxuaXNTdHJlYW0ud3JpdGFibGUgPSBzdHJlYW0gPT5cblx0aXNTdHJlYW0oc3RyZWFtKSAmJlxuXHRzdHJlYW0ud3JpdGFibGUgIT09IGZhbHNlICYmXG5cdHR5cGVvZiBzdHJlYW0uX3dyaXRlID09PSAnZnVuY3Rpb24nICYmXG5cdHR5cGVvZiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUgPT09ICdvYmplY3QnO1xuXG5pc1N0cmVhbS5yZWFkYWJsZSA9IHN0cmVhbSA9PlxuXHRpc1N0cmVhbShzdHJlYW0pICYmXG5cdHN0cmVhbS5yZWFkYWJsZSAhPT0gZmFsc2UgJiZcblx0dHlwZW9mIHN0cmVhbS5fcmVhZCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHR0eXBlb2Ygc3RyZWFtLl9yZWFkYWJsZVN0YXRlID09PSAnb2JqZWN0JztcblxuaXNTdHJlYW0uZHVwbGV4ID0gc3RyZWFtID0+XG5cdGlzU3RyZWFtLndyaXRhYmxlKHN0cmVhbSkgJiZcblx0aXNTdHJlYW0ucmVhZGFibGUoc3RyZWFtKTtcblxuaXNTdHJlYW0udHJhbnNmb3JtID0gc3RyZWFtID0+XG5cdGlzU3RyZWFtLmR1cGxleChzdHJlYW0pICYmXG5cdHR5cGVvZiBzdHJlYW0uX3RyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmVhbTtcbiJdLCJuYW1lcyI6WyJpc1N0cmVhbSIsInN0cmVhbSIsInBpcGUiLCJ3cml0YWJsZSIsIl93cml0ZSIsIl93cml0YWJsZVN0YXRlIiwicmVhZGFibGUiLCJfcmVhZCIsIl9yZWFkYWJsZVN0YXRlIiwiZHVwbGV4IiwidHJhbnNmb3JtIiwiX3RyYW5zZm9ybSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/node_modules/is-stream/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-CXwrNjme.cjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/get-it/dist/_chunks/defaultOptionsValidator-CXwrNjme.cjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst isReactNative = typeof navigator > \"u\" ? !1 : navigator.product === \"ReactNative\", defaultOptions = {\n    timeout: isReactNative ? 6e4 : 12e4\n}, processOptions = function(opts) {\n    const options = {\n        ...defaultOptions,\n        ...typeof opts == \"string\" ? {\n            url: opts\n        } : opts\n    }, { searchParams } = new URL(options.url, \"http://localhost\");\n    if (options.timeout = normalizeTimeout(options.timeout), options.query) {\n        for (const [key, value] of Object.entries(options.query))if (value !== void 0) if (Array.isArray(value)) for (const v of value)searchParams.append(key, v);\n        else searchParams.append(key, value);\n    }\n    const [url] = options.url.split(\"?\"), search = searchParams.toString();\n    return search && (options.url = `${url}?${search}`), options.method = options.body && !options.method ? \"POST\" : (options.method || \"GET\").toUpperCase(), options;\n};\nfunction normalizeTimeout(time) {\n    if (time === !1 || time === 0) return !1;\n    if (time.connect || time.socket) return time;\n    const delay = Number(time);\n    return isNaN(delay) ? normalizeTimeout(defaultOptions.timeout) : {\n        connect: delay,\n        socket: delay\n    };\n}\nconst validUrl = /^https?:\\/\\//i, validateOptions = function(options) {\n    if (!validUrl.test(options.url)) throw new Error(`\"${options.url}\" is not a valid URL`);\n};\nexports.processOptions = processOptions;\nexports.validateOptions = validateOptions; //# sourceMappingURL=defaultOptionsValidator-CXwrNjme.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2V0LWl0L2Rpc3QvX2NodW5rcy9kZWZhdWx0T3B0aW9uc1ZhbGlkYXRvci1DWHdyTmptZS5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixNQUFNQSxnQkFBZ0IsT0FBT0MsWUFBWSxNQUFNLENBQUMsSUFBSUEsVUFBVUMsT0FBTyxLQUFLLGVBQWVDLGlCQUFpQjtJQUFFQyxTQUFTSixnQkFBZ0IsTUFBTTtBQUFLLEdBQUdLLGlCQUFpQixTQUFTQyxJQUFJO0lBQy9LLE1BQU1DLFVBQVU7UUFDZCxHQUFHSixjQUFjO1FBQ2pCLEdBQUcsT0FBT0csUUFBUSxXQUFXO1lBQUVFLEtBQUtGO1FBQUssSUFBSUEsSUFBSTtJQUNuRCxHQUFHLEVBQUVHLFlBQVksRUFBRSxHQUFHLElBQUlDLElBQUlILFFBQVFDLEdBQUcsRUFBRTtJQUMzQyxJQUFJRCxRQUFRSCxPQUFPLEdBQUdPLGlCQUFpQkosUUFBUUgsT0FBTyxHQUFHRyxRQUFRSyxLQUFLLEVBQUU7UUFDdEUsS0FBSyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDVCxRQUFRSyxLQUFLLEVBQ3JELElBQUlFLFVBQVUsS0FBSyxHQUNqQixJQUFJRyxNQUFNQyxPQUFPLENBQUNKLFFBQ2hCLEtBQUssTUFBTUssS0FBS0wsTUFDZEwsYUFBYVcsTUFBTSxDQUFDUCxLQUFLTTthQUUzQlYsYUFBYVcsTUFBTSxDQUFDUCxLQUFLQztJQUNqQztJQUNBLE1BQU0sQ0FBQ04sSUFBSSxHQUFHRCxRQUFRQyxHQUFHLENBQUNhLEtBQUssQ0FBQyxNQUFNQyxTQUFTYixhQUFhYyxRQUFRO0lBQ3BFLE9BQU9ELFVBQVdmLENBQUFBLFFBQVFDLEdBQUcsR0FBRyxDQUFDLEVBQUVBLElBQUksQ0FBQyxFQUFFYyxPQUFPLENBQUMsR0FBR2YsUUFBUWlCLE1BQU0sR0FBR2pCLFFBQVFrQixJQUFJLElBQUksQ0FBQ2xCLFFBQVFpQixNQUFNLEdBQUcsU0FBUyxDQUFDakIsUUFBUWlCLE1BQU0sSUFBSSxLQUFJLEVBQUdFLFdBQVcsSUFBSW5CO0FBQzVKO0FBQ0EsU0FBU0ksaUJBQWlCZ0IsSUFBSTtJQUM1QixJQUFJQSxTQUFTLENBQUMsS0FBS0EsU0FBUyxHQUMxQixPQUFPLENBQUM7SUFDVixJQUFJQSxLQUFLQyxPQUFPLElBQUlELEtBQUtFLE1BQU0sRUFDN0IsT0FBT0Y7SUFDVCxNQUFNRyxRQUFRQyxPQUFPSjtJQUNyQixPQUFPSyxNQUFNRixTQUFTbkIsaUJBQWlCUixlQUFlQyxPQUFPLElBQUk7UUFBRXdCLFNBQVNFO1FBQU9ELFFBQVFDO0lBQU07QUFDbkc7QUFDQSxNQUFNRyxXQUFXLGlCQUFpQkMsa0JBQWtCLFNBQVMzQixPQUFPO0lBQ2xFLElBQUksQ0FBQzBCLFNBQVNFLElBQUksQ0FBQzVCLFFBQVFDLEdBQUcsR0FDNUIsTUFBTSxJQUFJNEIsTUFBTSxDQUFDLENBQUMsRUFBRTdCLFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztBQUN6RDtBQUNBNkIsc0JBQXNCLEdBQUdoQztBQUN6QmdDLHVCQUF1QixHQUFHSCxpQkFDMUIsNkRBQTZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2xpLWNyb3NzbGFuZC12aWRlb2dyYXBoeS8uL25vZGVfbW9kdWxlcy9nZXQtaXQvZGlzdC9fY2h1bmtzL2RlZmF1bHRPcHRpb25zVmFsaWRhdG9yLUNYd3JOam1lLmNqcz9jZTEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgaXNSZWFjdE5hdGl2ZSA9IHR5cGVvZiBuYXZpZ2F0b3IgPiBcInVcIiA/ICExIDogbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIiwgZGVmYXVsdE9wdGlvbnMgPSB7IHRpbWVvdXQ6IGlzUmVhY3ROYXRpdmUgPyA2ZTQgOiAxMmU0IH0sIHByb2Nlc3NPcHRpb25zID0gZnVuY3Rpb24ob3B0cykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLnR5cGVvZiBvcHRzID09IFwic3RyaW5nXCIgPyB7IHVybDogb3B0cyB9IDogb3B0c1xuICB9LCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChvcHRpb25zLnVybCwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICBpZiAob3B0aW9ucy50aW1lb3V0ID0gbm9ybWFsaXplVGltZW91dChvcHRpb25zLnRpbWVvdXQpLCBvcHRpb25zLnF1ZXJ5KSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5xdWVyeSkpXG4gICAgICBpZiAodmFsdWUgIT09IHZvaWQgMClcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICAgIGZvciAoY29uc3QgdiBvZiB2YWx1ZSlcbiAgICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgY29uc3QgW3VybF0gPSBvcHRpb25zLnVybC5zcGxpdChcIj9cIiksIHNlYXJjaCA9IHNlYXJjaFBhcmFtcy50b1N0cmluZygpO1xuICByZXR1cm4gc2VhcmNoICYmIChvcHRpb25zLnVybCA9IGAke3VybH0/JHtzZWFyY2h9YCksIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy5ib2R5ICYmICFvcHRpb25zLm1ldGhvZCA/IFwiUE9TVFwiIDogKG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCIpLnRvVXBwZXJDYXNlKCksIG9wdGlvbnM7XG59O1xuZnVuY3Rpb24gbm9ybWFsaXplVGltZW91dCh0aW1lKSB7XG4gIGlmICh0aW1lID09PSAhMSB8fCB0aW1lID09PSAwKVxuICAgIHJldHVybiAhMTtcbiAgaWYgKHRpbWUuY29ubmVjdCB8fCB0aW1lLnNvY2tldClcbiAgICByZXR1cm4gdGltZTtcbiAgY29uc3QgZGVsYXkgPSBOdW1iZXIodGltZSk7XG4gIHJldHVybiBpc05hTihkZWxheSkgPyBub3JtYWxpemVUaW1lb3V0KGRlZmF1bHRPcHRpb25zLnRpbWVvdXQpIDogeyBjb25uZWN0OiBkZWxheSwgc29ja2V0OiBkZWxheSB9O1xufVxuY29uc3QgdmFsaWRVcmwgPSAvXmh0dHBzPzpcXC9cXC8vaSwgdmFsaWRhdGVPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAoIXZhbGlkVXJsLnRlc3Qob3B0aW9ucy51cmwpKVxuICAgIHRocm93IG5ldyBFcnJvcihgXCIke29wdGlvbnMudXJsfVwiIGlzIG5vdCBhIHZhbGlkIFVSTGApO1xufTtcbmV4cG9ydHMucHJvY2Vzc09wdGlvbnMgPSBwcm9jZXNzT3B0aW9ucztcbmV4cG9ydHMudmFsaWRhdGVPcHRpb25zID0gdmFsaWRhdGVPcHRpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdE9wdGlvbnNWYWxpZGF0b3ItQ1h3ck5qbWUuY2pzLm1hcFxuIl0sIm5hbWVzIjpbImlzUmVhY3ROYXRpdmUiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZGVmYXVsdE9wdGlvbnMiLCJ0aW1lb3V0IiwicHJvY2Vzc09wdGlvbnMiLCJvcHRzIiwib3B0aW9ucyIsInVybCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsIm5vcm1hbGl6ZVRpbWVvdXQiLCJxdWVyeSIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsIkFycmF5IiwiaXNBcnJheSIsInYiLCJhcHBlbmQiLCJzcGxpdCIsInNlYXJjaCIsInRvU3RyaW5nIiwibWV0aG9kIiwiYm9keSIsInRvVXBwZXJDYXNlIiwidGltZSIsImNvbm5lY3QiLCJzb2NrZXQiLCJkZWxheSIsIk51bWJlciIsImlzTmFOIiwidmFsaWRVcmwiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJ0ZXN0IiwiRXJyb3IiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-CXwrNjme.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/get-it/dist/index.cjs":
/*!********************************************!*\
  !*** ./node_modules/get-it/dist/index.cjs ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: !0\n}));\nvar defaultOptionsValidator = __webpack_require__(/*! ./_chunks/defaultOptionsValidator-CXwrNjme.cjs */ \"(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-CXwrNjme.cjs\"), decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/decompress-response/index.js\"), follow = __webpack_require__(/*! follow-redirects */ \"(ssr)/./node_modules/follow-redirects/index.js\"), http = __webpack_require__(/*! http */ \"http\"), https = __webpack_require__(/*! https */ \"https\"), toStream = __webpack_require__(/*! into-stream */ \"(ssr)/./node_modules/into-stream/index.js\"), isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/get-it/node_modules/is-stream/index.js\"), progressStream = __webpack_require__(/*! progress-stream */ \"(ssr)/./node_modules/progress-stream/index.js\"), qs = __webpack_require__(/*! querystring */ \"querystring\"), url = __webpack_require__(/*! url */ \"url\"), tunnel = __webpack_require__(/*! tunnel-agent */ \"(ssr)/./node_modules/tunnel-agent/index.js\");\nfunction _interopDefaultCompat(e) {\n    return e && typeof e == \"object\" && \"default\" in e ? e : {\n        default: e\n    };\n}\nfunction _interopNamespaceCompat(e) {\n    if (e && typeof e == \"object\" && \"default\" in e) return e;\n    var n = /* @__PURE__ */ Object.create(null);\n    return e && Object.keys(e).forEach(function(k) {\n        if (k !== \"default\") {\n            var d = Object.getOwnPropertyDescriptor(e, k);\n            Object.defineProperty(n, k, d.get ? d : {\n                enumerable: !0,\n                get: function() {\n                    return e[k];\n                }\n            });\n        }\n    }), n.default = e, Object.freeze(n);\n}\nvar decompressResponse__default = /* @__PURE__ */ _interopDefaultCompat(decompressResponse), follow__default = /* @__PURE__ */ _interopDefaultCompat(follow), http__default = /* @__PURE__ */ _interopDefaultCompat(http), https__default = /* @__PURE__ */ _interopDefaultCompat(https), toStream__default = /* @__PURE__ */ _interopDefaultCompat(toStream), isStream__default = /* @__PURE__ */ _interopDefaultCompat(isStream), progressStream__default = /* @__PURE__ */ _interopDefaultCompat(progressStream), qs__default = /* @__PURE__ */ _interopDefaultCompat(qs), url__default = /* @__PURE__ */ _interopDefaultCompat(url), tunnel__namespace = /* @__PURE__ */ _interopNamespaceCompat(tunnel);\nconst middlewareReducer = (middleware)=>function(hook, defaultValue, ...args) {\n        const bailEarly = hook === \"onError\";\n        let value = defaultValue;\n        for(let i = 0; i < middleware[hook].length; i++){\n            const handler = middleware[hook][i];\n            if (value = handler(value, ...args), bailEarly && !value) break;\n        }\n        return value;\n    };\nfunction createPubSub() {\n    const subscribers = /* @__PURE__ */ Object.create(null);\n    let nextId = 0;\n    function subscribe(subscriber) {\n        const id = nextId++;\n        return subscribers[id] = subscriber, function() {\n            delete subscribers[id];\n        };\n    }\n    function publish(event) {\n        for(const id in subscribers)subscribers[id](event);\n    }\n    return {\n        publish,\n        subscribe\n    };\n}\nconst channelNames = [\n    \"request\",\n    \"response\",\n    \"progress\",\n    \"error\",\n    \"abort\"\n], middlehooks = [\n    \"processOptions\",\n    \"validateOptions\",\n    \"interceptRequest\",\n    \"finalizeOptions\",\n    \"onRequest\",\n    \"onResponse\",\n    \"onError\",\n    \"onReturn\",\n    \"onHeaders\"\n];\nfunction createRequester(initMiddleware, httpRequest) {\n    const loadedMiddleware = [], middleware = middlehooks.reduce((ware, name)=>(ware[name] = ware[name] || [], ware), {\n        processOptions: [\n            defaultOptionsValidator.processOptions\n        ],\n        validateOptions: [\n            defaultOptionsValidator.validateOptions\n        ]\n    });\n    function request(opts) {\n        const onResponse = (reqErr, res, ctx)=>{\n            let error = reqErr, response = res;\n            if (!error) try {\n                response = applyMiddleware(\"onResponse\", res, ctx);\n            } catch (err) {\n                response = null, error = err;\n            }\n            error = error && applyMiddleware(\"onError\", error, ctx), error ? channels.error.publish(error) : response && channels.response.publish(response);\n        }, channels = channelNames.reduce((target, name)=>(target[name] = createPubSub(), target), {}), applyMiddleware = middlewareReducer(middleware), options = applyMiddleware(\"processOptions\", opts);\n        applyMiddleware(\"validateOptions\", options);\n        const context = {\n            options,\n            channels,\n            applyMiddleware\n        };\n        let ongoingRequest;\n        const unsubscribe = channels.request.subscribe((ctx)=>{\n            ongoingRequest = httpRequest(ctx, (err, res)=>onResponse(err, res, ctx));\n        });\n        channels.abort.subscribe(()=>{\n            unsubscribe(), ongoingRequest && ongoingRequest.abort();\n        });\n        const returnValue = applyMiddleware(\"onReturn\", channels, context);\n        return returnValue === channels && channels.request.publish(context), returnValue;\n    }\n    return request.use = function(newMiddleware) {\n        if (!newMiddleware) throw new Error(\"Tried to add middleware that resolved to falsey value\");\n        if (typeof newMiddleware == \"function\") throw new Error(\"Tried to add middleware that was a function. It probably expects you to pass options to it.\");\n        if (newMiddleware.onReturn && middleware.onReturn.length > 0) throw new Error(\"Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event\");\n        return middlehooks.forEach((key)=>{\n            newMiddleware[key] && middleware[key].push(newMiddleware[key]);\n        }), loadedMiddleware.push(newMiddleware), request;\n    }, request.clone = ()=>createRequester(loadedMiddleware, httpRequest), initMiddleware.forEach(request.use), request;\n}\nfunction lowerCaseHeaders(headers) {\n    return Object.keys(headers || {}).reduce((acc, header)=>(acc[header.toLowerCase()] = headers[header], acc), {});\n}\nfunction formatHostname(hostname) {\n    return hostname.replace(/^\\.*/, \".\").toLowerCase();\n}\nfunction parseNoProxyZone(zoneStr) {\n    const zone = zoneStr.trim().toLowerCase(), zoneParts = zone.split(\":\", 2), zoneHost = formatHostname(zoneParts[0]), zonePort = zoneParts[1], hasPort = zone.indexOf(\":\") > -1;\n    return {\n        hostname: zoneHost,\n        port: zonePort,\n        hasPort\n    };\n}\nfunction uriInNoProxy(uri, noProxy) {\n    const port = uri.port || (uri.protocol === \"https:\" ? \"443\" : \"80\"), hostname = formatHostname(uri.hostname);\n    return noProxy.split(\",\").map(parseNoProxyZone).some((noProxyZone)=>{\n        const isMatchedAt = hostname.indexOf(noProxyZone.hostname), hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n        return noProxyZone.hasPort ? port === noProxyZone.port && hostnameMatched : hostnameMatched;\n    });\n}\nfunction getProxyFromUri(uri) {\n    const noProxy = process.env.NO_PROXY || process.env.no_proxy || \"\";\n    return noProxy === \"*\" || noProxy !== \"\" && uriInNoProxy(uri, noProxy) ? null : uri.protocol === \"http:\" ? process.env.HTTP_PROXY || process.env.http_proxy || null : uri.protocol === \"https:\" && (process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy) || null;\n}\nfunction getHostFromUri(uri) {\n    let host = uri.host;\n    return uri.port && (uri.port === \"80\" && uri.protocol === \"http:\" || uri.port === \"443\" && uri.protocol === \"https:\") && (host = uri.hostname), host;\n}\nfunction getHostHeaderWithPort(uri) {\n    const port = uri.port || (uri.protocol === \"https:\" ? \"443\" : \"80\");\n    return `${uri.hostname}:${port}`;\n}\nfunction rewriteUriForProxy(reqOpts, uri, proxy) {\n    const headers = reqOpts.headers || {}, options = Object.assign({}, reqOpts, {\n        headers\n    });\n    return headers.host = headers.host || getHostHeaderWithPort(uri), options.protocol = proxy.protocol || options.protocol, options.hostname = proxy.host.replace(/:\\d+/, \"\"), options.port = proxy.port, options.host = getHostFromUri(Object.assign({}, uri, proxy)), options.href = `${options.protocol}//${options.host}${options.path}`, options.path = url__default.default.format(uri), options;\n}\nfunction getProxyOptions(options) {\n    let proxy;\n    if (options.hasOwnProperty(\"proxy\")) proxy = options.proxy;\n    else {\n        const uri = url__default.default.parse(options.url);\n        proxy = getProxyFromUri(uri);\n    }\n    return typeof proxy == \"string\" ? url__default.default.parse(proxy) : proxy;\n}\n/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ function concat(stream, cb) {\n    const chunks = [];\n    stream.on(\"data\", function(chunk) {\n        chunks.push(chunk);\n    }), stream.once(\"end\", function() {\n        cb && cb(null, Buffer.concat(chunks)), cb = null;\n    }), stream.once(\"error\", function(err) {\n        cb && cb(err), cb = null;\n    });\n}\nfunction timedOut(req, time) {\n    if (req.timeoutTimer) return req;\n    const delays = isNaN(time) ? time : {\n        socket: time,\n        connect: time\n    }, hostHeader = req.getHeader(\"host\"), host = hostHeader ? \" to \" + hostHeader : \"\";\n    delays.connect !== void 0 && (req.timeoutTimer = setTimeout(function() {\n        req.abort();\n        const e = new Error(\"Connection timed out on request\" + host);\n        e.code = \"ETIMEDOUT\", req.emit(\"error\", e);\n    }, delays.connect)), req.on(\"socket\", function(socket) {\n        if (!(socket.connecting || socket._connecting)) {\n            connect();\n            return;\n        }\n        socket.once(\"connect\", connect);\n    });\n    function clear() {\n        req.timeoutTimer && (clearTimeout(req.timeoutTimer), req.timeoutTimer = null);\n    }\n    function connect() {\n        clear(), delays.socket !== void 0 && req.setTimeout(delays.socket, function() {\n            req.abort();\n            const e = new Error(\"Socket timed out on request\" + host);\n            e.code = \"ESOCKETTIMEDOUT\", req.emit(\"error\", e);\n        });\n    }\n    return req.on(\"error\", clear);\n}\nconst uriParts = [\n    \"protocol\",\n    \"slashes\",\n    \"auth\",\n    \"host\",\n    \"port\",\n    \"hostname\",\n    \"hash\",\n    \"search\",\n    \"query\",\n    \"pathname\",\n    \"path\",\n    \"href\"\n], defaultProxyHeaderWhiteList = [\n    \"accept\",\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"accept-language\",\n    \"accept-ranges\",\n    \"cache-control\",\n    \"content-encoding\",\n    \"content-language\",\n    \"content-location\",\n    \"content-md5\",\n    \"content-range\",\n    \"content-type\",\n    \"connection\",\n    \"date\",\n    \"expect\",\n    \"max-forwards\",\n    \"pragma\",\n    \"referer\",\n    \"te\",\n    \"user-agent\",\n    \"via\"\n], defaultProxyHeaderExclusiveList = [\n    \"proxy-authorization\"\n];\nfunction shouldEnable(options) {\n    return typeof options.tunnel < \"u\" ? !!options.tunnel : url__default.default.parse(options.url).protocol === \"https:\";\n}\nfunction applyAgent(opts = {}, proxy) {\n    const options = Object.assign({}, opts), proxyHeaderWhiteList = defaultProxyHeaderWhiteList.concat(options.proxyHeaderWhiteList || []).map((header)=>header.toLowerCase()), proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList.concat(options.proxyHeaderExclusiveList || []).map((header)=>header.toLowerCase()), proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList);\n    proxyHeaders.host = constructProxyHost(options), options.headers = Object.keys(options.headers || {}).reduce((headers, header)=>(proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1 && (headers[header] = options.headers[header]), headers), {});\n    const tunnelFn = getTunnelFn(options, proxy), tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders);\n    return options.agent = tunnelFn(tunnelOptions), options;\n}\nfunction getTunnelFn(options, proxy) {\n    const uri = getUriParts(options), tunnelFnName = constructTunnelFnName(uri, proxy);\n    return tunnel__namespace[tunnelFnName];\n}\nfunction getUriParts(options) {\n    return uriParts.reduce((uri, part)=>(uri[part] = options[part], uri), {});\n}\nfunction constructTunnelFnName(uri, proxy) {\n    const uriProtocol = uri.protocol === \"https:\" ? \"https\" : \"http\", proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\";\n    return `${uriProtocol}Over${proxyProtocol}`;\n}\nfunction constructProxyHost(uri) {\n    const port = uri.port, protocol = uri.protocol;\n    let proxyHost = `${uri.hostname}:`;\n    return port ? proxyHost += port : protocol === \"https:\" ? proxyHost += \"443\" : proxyHost += \"80\", proxyHost;\n}\nfunction getAllowedProxyHeaders(headers, whiteList) {\n    return Object.keys(headers).filter((header)=>whiteList.indexOf(header.toLowerCase()) !== -1).reduce((set, header)=>(set[header] = headers[header], set), {});\n}\nfunction constructTunnelOptions(options, proxy, proxyHeaders) {\n    return {\n        proxy: {\n            host: proxy.hostname,\n            port: +proxy.port,\n            proxyAuth: proxy.auth,\n            headers: proxyHeaders\n        },\n        headers: options.headers,\n        ca: options.ca,\n        cert: options.cert,\n        key: options.key,\n        passphrase: options.passphrase,\n        pfx: options.pfx,\n        ciphers: options.ciphers,\n        rejectUnauthorized: options.rejectUnauthorized,\n        secureOptions: options.secureOptions,\n        secureProtocol: options.secureProtocol\n    };\n}\nconst adapter = \"node\", reduceResponse = (res, reqUrl, method, body)=>({\n        body,\n        url: reqUrl,\n        method,\n        headers: res.headers,\n        statusCode: res.statusCode,\n        statusMessage: res.statusMessage\n    }), httpRequester = (context, cb)=>{\n    const { options } = context, uri = Object.assign({}, url__default.default.parse(options.url));\n    if (typeof fetch == \"function\" && options.fetch) {\n        const controller = new AbortController(), reqOpts2 = context.applyMiddleware(\"finalizeOptions\", {\n            ...uri,\n            method: options.method,\n            headers: {\n                ...typeof options.fetch == \"object\" && options.fetch.headers ? lowerCaseHeaders(options.fetch.headers) : {},\n                ...lowerCaseHeaders(options.headers)\n            },\n            maxRedirects: options.maxRedirects\n        }), fetchOpts = {\n            credentials: options.withCredentials ? \"include\" : \"omit\",\n            ...typeof options.fetch == \"object\" ? options.fetch : {},\n            method: reqOpts2.method,\n            headers: reqOpts2.headers,\n            body: options.body,\n            signal: controller.signal\n        }, injectedResponse2 = context.applyMiddleware(\"interceptRequest\", void 0, {\n            adapter,\n            context\n        });\n        if (injectedResponse2) {\n            const cbTimer = setTimeout(cb, 0, null, injectedResponse2);\n            return {\n                abort: ()=>clearTimeout(cbTimer)\n            };\n        }\n        const request2 = fetch(options.url, fetchOpts);\n        return context.applyMiddleware(\"onRequest\", {\n            options,\n            adapter,\n            request: request2,\n            context\n        }), request2.then(async (res)=>{\n            const body = options.rawBody ? res.body : await res.text(), headers = {};\n            res.headers.forEach((value, key)=>{\n                headers[key] = value;\n            }), cb(null, {\n                body,\n                url: res.url,\n                method: options.method,\n                headers,\n                statusCode: res.status,\n                statusMessage: res.statusText\n            });\n        }).catch((err)=>{\n            err.name != \"AbortError\" && cb(err);\n        }), {\n            abort: ()=>controller.abort()\n        };\n    }\n    const bodyType = isStream__default.default(options.body) ? \"stream\" : typeof options.body;\n    if (bodyType !== \"undefined\" && bodyType !== \"stream\" && bodyType !== \"string\" && !Buffer.isBuffer(options.body)) throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`);\n    const lengthHeader = {};\n    options.bodySize ? lengthHeader[\"content-length\"] = options.bodySize : options.body && bodyType !== \"stream\" && (lengthHeader[\"content-length\"] = Buffer.byteLength(options.body));\n    let aborted = !1;\n    const callback = (err, res)=>!aborted && cb(err, res);\n    context.channels.abort.subscribe(()=>{\n        aborted = !0;\n    });\n    let reqOpts = Object.assign({}, uri, {\n        method: options.method,\n        headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n        maxRedirects: options.maxRedirects\n    });\n    const proxy = getProxyOptions(options), tunnel2 = proxy && shouldEnable(options), injectedResponse = context.applyMiddleware(\"interceptRequest\", void 0, {\n        adapter,\n        context\n    });\n    if (injectedResponse) {\n        const cbTimer = setImmediate(callback, null, injectedResponse);\n        return {\n            abort: ()=>clearImmediate(cbTimer)\n        };\n    }\n    if (options.maxRedirects !== 0 && (reqOpts.maxRedirects = options.maxRedirects || 5), proxy && tunnel2 ? reqOpts = applyAgent(reqOpts, proxy) : proxy && !tunnel2 && (reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)), !tunnel2 && proxy && proxy.auth && !reqOpts.headers[\"proxy-authorization\"]) {\n        const [username, password] = proxy.auth.username ? [\n            proxy.auth.username,\n            proxy.auth.password\n        ] : proxy.auth.split(\":\").map((item)=>qs__default.default.unescape(item)), authBase64 = Buffer.from(`${username}:${password}`, \"utf8\").toString(\"base64\");\n        reqOpts.headers[\"proxy-authorization\"] = `Basic ${authBase64}`;\n    }\n    const transport = getRequestTransport(reqOpts, proxy, tunnel2);\n    typeof options.debug == \"function\" && proxy && options.debug(\"Proxying using %s\", reqOpts.agent ? \"tunnel agent\" : `${reqOpts.host}:${reqOpts.port}`);\n    const tryCompressed = reqOpts.method !== \"HEAD\";\n    tryCompressed && !reqOpts.headers[\"accept-encoding\"] && options.compress !== !1 && (reqOpts.headers[\"accept-encoding\"] = \"br, gzip, deflate\");\n    const finalOptions = context.applyMiddleware(\"finalizeOptions\", reqOpts), request = transport.request(finalOptions, (response)=>{\n        const res = tryCompressed ? decompressResponse__default.default(response) : response, resStream = context.applyMiddleware(\"onHeaders\", res, {\n            headers: response.headers,\n            adapter,\n            context\n        }), reqUrl = \"responseUrl\" in response ? response.responseUrl : options.url;\n        if (options.stream) {\n            callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream));\n            return;\n        }\n        concat(resStream, (err, data)=>{\n            if (err) return callback(err);\n            const body = options.rawBody ? data : data.toString(), reduced = reduceResponse(res, reqUrl, reqOpts.method, body);\n            return callback(null, reduced);\n        });\n    });\n    options.timeout && timedOut(request, options.timeout), request.once(\"error\", callback);\n    const { bodyStream, progress } = getProgressStream(options);\n    return context.applyMiddleware(\"onRequest\", {\n        options,\n        adapter,\n        request,\n        context,\n        progress\n    }), bodyStream ? bodyStream.pipe(request) : request.end(options.body), {\n        abort: ()=>request.abort()\n    };\n};\nfunction getProgressStream(options) {\n    if (!options.body) return {};\n    const bodyIsStream = isStream__default.default(options.body), length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body));\n    if (!length) return bodyIsStream ? {\n        bodyStream: options.body\n    } : {};\n    const progress = progressStream__default.default({\n        time: 16,\n        length\n    });\n    return {\n        bodyStream: (bodyIsStream ? options.body : toStream__default.default(options.body)).pipe(progress),\n        progress\n    };\n}\nfunction getRequestTransport(reqOpts, proxy, tunnel2) {\n    const isHttpsRequest = reqOpts.protocol === \"https:\", transports = reqOpts.maxRedirects === 0 ? {\n        http: http__default.default,\n        https: https__default.default\n    } : {\n        http: follow__default.default.http,\n        https: follow__default.default.https\n    };\n    if (!proxy || tunnel2) return isHttpsRequest ? transports.https : transports.http;\n    let isHttpsProxy = proxy.port === 443;\n    return proxy.protocol && (isHttpsProxy = /^https:?/.test(proxy.protocol)), isHttpsProxy ? transports.https : transports.http;\n}\nconst getIt = (initMiddleware = [], httpRequest = httpRequester)=>createRequester(initMiddleware, httpRequest), environment = \"node\";\nexports.adapter = adapter;\nexports.environment = environment;\nexports.getIt = getIt; //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/get-it/dist/middleware.cjs":
/*!*************************************************!*\
  !*** ./node_modules/get-it/dist/middleware.cjs ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: !0\n}));\nvar http = __webpack_require__(/*! http */ \"http\"), https = __webpack_require__(/*! https */ \"https\"), debugIt = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"), defaultOptionsValidator = __webpack_require__(/*! ./_chunks/defaultOptionsValidator-CXwrNjme.cjs */ \"(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-CXwrNjme.cjs\"), isPlainObject = __webpack_require__(/*! is-plain-object */ \"(ssr)/./node_modules/is-plain-object/dist/is-plain-object.js\"), progressStream = __webpack_require__(/*! progress-stream */ \"(ssr)/./node_modules/progress-stream/index.js\"), allowed = __webpack_require__(/*! is-retry-allowed */ \"(ssr)/./node_modules/is-retry-allowed/index.js\");\nfunction _interopDefaultCompat(e) {\n    return e && typeof e == \"object\" && \"default\" in e ? e : {\n        default: e\n    };\n}\nvar debugIt__default = /* @__PURE__ */ _interopDefaultCompat(debugIt), progressStream__default = /* @__PURE__ */ _interopDefaultCompat(progressStream), allowed__default = /* @__PURE__ */ _interopDefaultCompat(allowed);\nconst isHttpsProto = /^https:/i;\nfunction agent(opts) {\n    const httpAgent = new http.Agent(opts), httpsAgent = new https.Agent(opts), agents = {\n        http: httpAgent,\n        https: httpsAgent\n    };\n    return {\n        finalizeOptions: (options)=>{\n            if (options.agent) return options;\n            if (options.maxRedirects > 0) return {\n                ...options,\n                agents\n            };\n            const isHttps = isHttpsProto.test(options.href || options.protocol);\n            return {\n                ...options,\n                agent: isHttps ? httpsAgent : httpAgent\n            };\n        }\n    };\n}\nconst leadingSlash = /^\\//, trailingSlash = /\\/$/;\nfunction base(baseUrl) {\n    const baseUri = baseUrl.replace(trailingSlash, \"\");\n    return {\n        processOptions: (options)=>{\n            if (/^https?:\\/\\//i.test(options.url)) return options;\n            const url = [\n                baseUri,\n                options.url.replace(leadingSlash, \"\")\n            ].join(\"/\");\n            return Object.assign({}, options, {\n                url\n            });\n        }\n    };\n}\nconst SENSITIVE_HEADERS = [\n    \"cookie\",\n    \"authorization\"\n], hasOwn = Object.prototype.hasOwnProperty, redactKeys = (source, redacted)=>{\n    const target = {};\n    for(const key in source)hasOwn.call(source, key) && (target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? \"<redacted>\" : source[key]);\n    return target;\n};\nfunction debug(opts = {}) {\n    const verbose = opts.verbose, namespace = opts.namespace || \"get-it\", defaultLogger = debugIt__default.default(namespace), log = opts.log || defaultLogger, shortCircuit = log === defaultLogger && !debugIt__default.default.enabled(namespace);\n    let requestId = 0;\n    return {\n        processOptions: (options)=>(options.debug = log, options.requestId = options.requestId || ++requestId, options),\n        onRequest: (event)=>{\n            if (shortCircuit || !event) return event;\n            const options = event.options;\n            if (log(\"[%s] HTTP %s %s\", options.requestId, options.method, options.url), verbose && options.body && typeof options.body == \"string\" && log(\"[%s] Request body: %s\", options.requestId, options.body), verbose && options.headers) {\n                const headers2 = opts.redactSensitiveHeaders === !1 ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);\n                log(\"[%s] Request headers: %s\", options.requestId, JSON.stringify(headers2, null, 2));\n            }\n            return event;\n        },\n        onResponse: (res, context)=>{\n            if (shortCircuit || !res) return res;\n            const reqId = context.options.requestId;\n            return log(\"[%s] Response code: %s %s\", reqId, res.statusCode, res.statusMessage), verbose && res.body && log(\"[%s] Response body: %s\", reqId, stringifyBody(res)), res;\n        },\n        onError: (err, context)=>{\n            const reqId = context.options.requestId;\n            return err ? (log(\"[%s] ERROR: %s\", reqId, err.message), err) : (log(\"[%s] Error encountered, but handled by an earlier middleware\", reqId), err);\n        }\n    };\n}\nfunction stringifyBody(res) {\n    return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? tryFormat(res.body) : res.body;\n}\nfunction tryFormat(body) {\n    try {\n        const parsed = typeof body == \"string\" ? JSON.parse(body) : body;\n        return JSON.stringify(parsed, null, 2);\n    } catch  {\n        return body;\n    }\n}\nfunction headers(_headers, opts = {}) {\n    return {\n        processOptions: (options)=>{\n            const existing = options.headers || {};\n            return options.headers = opts.override ? Object.assign({}, existing, _headers) : Object.assign({}, _headers, existing), options;\n        }\n    };\n}\nclass HttpError extends Error {\n    constructor(res, ctx){\n        super();\n        const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}\\u2026` : res.url;\n        let msg = `${res.method}-request to ${truncatedUrl} resulted in `;\n        msg += `HTTP ${res.statusCode} ${res.statusMessage}`, this.message = msg.trim(), this.response = res, this.request = ctx.options;\n    }\n}\nfunction httpErrors() {\n    return {\n        onResponse: (res, ctx)=>{\n            if (!(res.statusCode >= 400)) return res;\n            throw new HttpError(res, ctx);\n        }\n    };\n}\nfunction injectResponse(opts = {}) {\n    if (typeof opts.inject != \"function\") throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n    return {\n        interceptRequest: function(prevValue, event) {\n            const response = opts.inject(event, prevValue);\n            if (!response) return prevValue;\n            const options = event.context.options;\n            return {\n                body: \"\",\n                url: options.url,\n                method: options.method,\n                headers: {},\n                statusCode: 200,\n                statusMessage: \"OK\",\n                ...response\n            };\n        }\n    };\n}\nconst isBuffer = typeof Buffer > \"u\" ? ()=>!1 : (obj)=>Buffer.isBuffer(obj), serializeTypes = [\n    \"boolean\",\n    \"string\",\n    \"number\"\n];\nfunction jsonRequest() {\n    return {\n        processOptions: (options)=>{\n            const body = options.body;\n            return !body || !(typeof body.pipe != \"function\" && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject.isPlainObject(body))) ? options : Object.assign({}, options, {\n                body: JSON.stringify(options.body),\n                headers: Object.assign({}, options.headers, {\n                    \"Content-Type\": \"application/json\"\n                })\n            });\n        }\n    };\n}\nfunction jsonResponse(opts) {\n    return {\n        onResponse: (response)=>{\n            const contentType = response.headers[\"content-type\"] || \"\", shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n            return !response.body || !contentType || !shouldDecode ? response : Object.assign({}, response, {\n                body: tryParse(response.body)\n            });\n        },\n        processOptions: (options)=>Object.assign({}, options, {\n                headers: Object.assign({\n                    Accept: \"application/json\"\n                }, options.headers)\n            })\n    };\n    function tryParse(body) {\n        try {\n            return JSON.parse(body);\n        } catch (err) {\n            throw err.message = `Failed to parsed response body as JSON: ${err.message}`, err;\n        }\n    }\n}\nfunction isBrowserOptions(options) {\n    return typeof options == \"object\" && options !== null && !(\"protocol\" in options);\n}\nfunction mtls(config = {}) {\n    if (!config.ca) throw new Error('Required mtls option \"ca\" is missing');\n    if (!config.cert) throw new Error('Required mtls option \"cert\" is missing');\n    if (!config.key) throw new Error('Required mtls option \"key\" is missing');\n    return {\n        finalizeOptions: (options)=>{\n            if (isBrowserOptions(options)) return options;\n            const mtlsOpts = {\n                cert: config.cert,\n                key: config.key,\n                ca: config.ca\n            };\n            return Object.assign({}, options, mtlsOpts);\n        }\n    };\n}\nlet actualGlobal = {};\ntypeof globalThis < \"u\" ? actualGlobal = globalThis :  false ? 0 : typeof global < \"u\" ? actualGlobal = global : typeof self < \"u\" && (actualGlobal = self);\nvar global$1 = actualGlobal;\nfunction observable(opts = {}) {\n    const Observable = // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || global$1.Observable;\n    if (!Observable) throw new Error(\"`Observable` is not available in global scope, and no implementation was passed\");\n    return {\n        onReturn: (channels, context)=>new Observable((observer)=>(channels.error.subscribe((err)=>observer.error(err)), channels.progress.subscribe((event)=>observer.next(Object.assign({\n                        type: \"progress\"\n                    }, event))), channels.response.subscribe((response)=>{\n                    observer.next(Object.assign({\n                        type: \"response\"\n                    }, response)), observer.complete();\n                }), channels.request.publish(context), ()=>channels.abort.publish()))\n    };\n}\nfunction normalizer(stage) {\n    return (prog)=>({\n            stage,\n            percent: prog.percentage,\n            total: prog.length,\n            loaded: prog.transferred,\n            lengthComputable: !(prog.length === 0 && prog.percentage === 0)\n        });\n}\nfunction progress() {\n    return {\n        onHeaders: (response, evt)=>{\n            const _progress = progressStream__default.default({\n                time: 16\n            }), normalize = normalizer(\"download\"), contentLength = response.headers[\"content-length\"], length = contentLength ? Number(contentLength) : 0;\n            return !isNaN(length) && length > 0 && _progress.setLength(length), _progress.on(\"progress\", (prog)=>evt.context.channels.progress.publish(normalize(prog))), response.pipe(_progress);\n        },\n        onRequest: (evt)=>{\n            if (!evt.progress) return;\n            const normalize = normalizer(\"upload\");\n            evt.progress.on(\"progress\", (prog)=>evt.context.channels.progress.publish(normalize(prog)));\n        }\n    };\n}\nconst promise = (options = {})=>{\n    const PromiseImplementation = options.implementation || Promise;\n    if (!PromiseImplementation) throw new Error(\"`Promise` is not available in global scope, and no implementation was passed\");\n    return {\n        onReturn: (channels, context)=>new PromiseImplementation((resolve, reject)=>{\n                const cancel = context.options.cancelToken;\n                cancel && cancel.promise.then((reason)=>{\n                    channels.abort.publish(reason), reject(reason);\n                }), channels.error.subscribe(reject), channels.response.subscribe((response)=>{\n                    resolve(options.onlyBody ? response.body : response);\n                }), setTimeout(()=>{\n                    try {\n                        channels.request.publish(context);\n                    } catch (err) {\n                        reject(err);\n                    }\n                }, 0);\n            })\n    };\n};\nclass Cancel {\n    constructor(message){\n        this.__CANCEL__ = !0, this.message = message;\n    }\n    toString() {\n        return `Cancel${this.message ? `: ${this.message}` : \"\"}`;\n    }\n}\nconst _CancelToken = class {\n    constructor(executor){\n        if (typeof executor != \"function\") throw new TypeError(\"executor must be a function.\");\n        let resolvePromise = null;\n        this.promise = new Promise((resolve)=>{\n            resolvePromise = resolve;\n        }), executor((message)=>{\n            this.reason || (this.reason = new Cancel(message), resolvePromise(this.reason));\n        });\n    }\n};\n_CancelToken.source = ()=>{\n    let cancel;\n    return {\n        token: new _CancelToken((can)=>{\n            cancel = can;\n        }),\n        cancel\n    };\n};\nlet CancelToken = _CancelToken;\nconst isCancel = (value)=>!!(value && value != null && value.__CANCEL__);\npromise.Cancel = Cancel;\npromise.CancelToken = CancelToken;\npromise.isCancel = isCancel;\nfunction proxy(_proxy) {\n    if (_proxy !== !1 && (!_proxy || !_proxy.host)) throw new Error(\"Proxy middleware takes an object of host, port and auth properties\");\n    return {\n        processOptions: (options)=>Object.assign({\n                proxy: _proxy\n            }, options)\n    };\n}\nvar defaultShouldRetry = (err, num, options)=>options.method !== \"GET\" && options.method !== \"HEAD\" || err.response && err.response.statusCode ? !1 : allowed__default.default(err);\nconst isStream = (stream)=>stream !== null && typeof stream == \"object\" && typeof stream.pipe == \"function\";\nvar sharedRetry = (opts)=>{\n    const maxRetries = opts.maxRetries || 5, retryDelay = opts.retryDelay || getRetryDelay, allowRetry = opts.shouldRetry;\n    return {\n        onError: (err, context)=>{\n            const options = context.options, max = options.maxRetries || maxRetries, shouldRetry = options.shouldRetry || allowRetry, attemptNumber = options.attemptNumber || 0;\n            if (isStream(options.body) || !shouldRetry(err, attemptNumber, options) || attemptNumber >= max) return err;\n            const newContext = Object.assign({}, context, {\n                options: Object.assign({}, options, {\n                    attemptNumber: attemptNumber + 1\n                })\n            });\n            return setTimeout(()=>context.channels.request.publish(newContext), retryDelay(attemptNumber)), null;\n        }\n    };\n};\nfunction getRetryDelay(attemptNum) {\n    return 100 * Math.pow(2, attemptNum) + Math.random() * 100;\n}\nconst retry = (opts = {})=>sharedRetry({\n        shouldRetry: defaultShouldRetry,\n        ...opts\n    });\nretry.shouldRetry = defaultShouldRetry;\nfunction encode(data) {\n    const query = new URLSearchParams(), nest = (name, _value)=>{\n        const value = _value instanceof Set ? Array.from(_value) : _value;\n        if (Array.isArray(value)) if (value.length) for(const index in value)nest(`${name}[${index}]`, value[index]);\n        else query.append(`${name}[]`, \"\");\n        else if (typeof value == \"object\" && value !== null) for (const [key, obj] of Object.entries(value))nest(`${name}[${key}]`, obj);\n        else query.append(name, value);\n    };\n    for (const [key, value] of Object.entries(data))nest(key, value);\n    return query.toString();\n}\nfunction urlEncoded() {\n    return {\n        processOptions: (options)=>{\n            const body = options.body;\n            return !body || !(typeof body.pipe != \"function\" && !isBuffer(body) && isPlainObject.isPlainObject(body)) ? options : {\n                ...options,\n                body: encode(options.body),\n                headers: {\n                    ...options.headers,\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            };\n        }\n    };\n}\nfunction buildKeepAlive(agent2) {\n    return function(config = {}) {\n        const ms = config.ms || 1e3, maxFree = config.maxFree || 256;\n        return agent2({\n            keepAlive: !0,\n            keepAliveMsecs: ms,\n            maxFreeSockets: maxFree\n        });\n    };\n}\nconst keepAlive = buildKeepAlive(agent);\nexports.processOptions = defaultOptionsValidator.processOptions;\nexports.validateOptions = defaultOptionsValidator.validateOptions;\nexports.Cancel = Cancel;\nexports.CancelToken = CancelToken;\nexports.agent = agent;\nexports.base = base;\nexports.debug = debug;\nexports.headers = headers;\nexports.httpErrors = httpErrors;\nexports.injectResponse = injectResponse;\nexports.jsonRequest = jsonRequest;\nexports.jsonResponse = jsonResponse;\nexports.keepAlive = keepAlive;\nexports.mtls = mtls;\nexports.observable = observable;\nexports.progress = progress;\nexports.promise = promise;\nexports.proxy = proxy;\nexports.retry = retry;\nexports.urlEncoded = urlEncoded; //# sourceMappingURL=middleware.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/dist/middleware.cjs\n");

/***/ })

};
;