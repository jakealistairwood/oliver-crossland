"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/is-hotkey";
exports.ids = ["vendor-chunks/is-hotkey"];
exports.modules = {

/***/ "(ssr)/./node_modules/is-hotkey/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/is-hotkey/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Constants.\n */ var IS_MAC =  false && 0;\nvar MODIFIERS = {\n    alt: \"altKey\",\n    control: \"ctrlKey\",\n    meta: \"metaKey\",\n    shift: \"shiftKey\"\n};\nvar ALIASES = {\n    add: \"+\",\n    break: \"pause\",\n    cmd: \"meta\",\n    command: \"meta\",\n    ctl: \"control\",\n    ctrl: \"control\",\n    del: \"delete\",\n    down: \"arrowdown\",\n    esc: \"escape\",\n    ins: \"insert\",\n    left: \"arrowleft\",\n    mod: IS_MAC ? \"meta\" : \"control\",\n    opt: \"alt\",\n    option: \"alt\",\n    return: \"enter\",\n    right: \"arrowright\",\n    space: \" \",\n    spacebar: \" \",\n    up: \"arrowup\",\n    win: \"meta\",\n    windows: \"meta\"\n};\nvar CODES = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    control: 17,\n    alt: 18,\n    pause: 19,\n    capslock: 20,\n    escape: 27,\n    \" \": 32,\n    pageup: 33,\n    pagedown: 34,\n    end: 35,\n    home: 36,\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    insert: 45,\n    delete: 46,\n    meta: 91,\n    numlock: 144,\n    scrolllock: 145,\n    \";\": 186,\n    \"=\": 187,\n    \",\": 188,\n    \"-\": 189,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"[\": 219,\n    \"\\\\\": 220,\n    \"]\": 221,\n    \"'\": 222\n};\nfor(var f = 1; f < 20; f++){\n    CODES[\"f\" + f] = 111 + f;\n}\n/**\n * Is hotkey?\n */ function isHotkey(hotkey, options, event) {\n    if (options && !(\"byKey\" in options)) {\n        event = options;\n        options = null;\n    }\n    if (!Array.isArray(hotkey)) {\n        hotkey = [\n            hotkey\n        ];\n    }\n    var array = hotkey.map(function(string) {\n        return parseHotkey(string, options);\n    });\n    var check = function check(e) {\n        return array.some(function(object) {\n            return compareHotkey(object, e);\n        });\n    };\n    var ret = event == null ? check : check(event);\n    return ret;\n}\nfunction isCodeHotkey(hotkey, event) {\n    return isHotkey(hotkey, event);\n}\nfunction isKeyHotkey(hotkey, event) {\n    return isHotkey(hotkey, {\n        byKey: true\n    }, event);\n}\n/**\n * Parse.\n */ function parseHotkey(hotkey, options) {\n    var byKey = options && options.byKey;\n    var ret = {};\n    // Special case to handle the `+` key since we use it as a separator.\n    hotkey = hotkey.replace(\"++\", \"+add\");\n    var values = hotkey.split(\"+\");\n    var length = values.length;\n    // Ensure that all the modifiers are set to false unless the hotkey has them.\n    for(var k in MODIFIERS){\n        ret[MODIFIERS[k]] = false;\n    }\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n        for(var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var value = _step.value;\n            var optional = value.endsWith(\"?\") && value.length > 1;\n            if (optional) {\n                value = value.slice(0, -1);\n            }\n            var name = toKeyName(value);\n            var modifier = MODIFIERS[name];\n            if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name]) {\n                throw new TypeError('Unknown modifier: \"' + value + '\"');\n            }\n            if (length === 1 || !modifier) {\n                if (byKey) {\n                    ret.key = name;\n                } else {\n                    ret.which = toKeyCode(value);\n                }\n            }\n            if (modifier) {\n                ret[modifier] = optional ? null : true;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Compare.\n */ function compareHotkey(object, event) {\n    for(var key in object){\n        var expected = object[key];\n        var actual = void 0;\n        if (expected == null) {\n            continue;\n        }\n        if (key === \"key\" && event.key != null) {\n            actual = event.key.toLowerCase();\n        } else if (key === \"which\") {\n            actual = expected === 91 && event.which === 93 ? 91 : event.which;\n        } else {\n            actual = event[key];\n        }\n        if (actual == null && expected === false) {\n            continue;\n        }\n        if (actual !== expected) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Utils.\n */ function toKeyCode(name) {\n    name = toKeyName(name);\n    var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n    return code;\n}\nfunction toKeyName(name) {\n    name = name.toLowerCase();\n    name = ALIASES[name] || name;\n    return name;\n}\n/**\n * Export.\n */ exports[\"default\"] = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/is-hotkey/lib/index.js\n");

/***/ })

};
;