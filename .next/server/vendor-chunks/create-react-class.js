"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/create-react-class";
exports.ids = ["vendor-chunks/create-react-class"];
exports.modules = {

/***/ "(ssr)/./node_modules/create-react-class/factory.js":
/*!****************************************************!*\
  !*** ./node_modules/create-react-class/factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\n// -- Inlined from fbjs --\nvar emptyObject = {};\nif (true) {\n    Object.freeze(emptyObject);\n}\nvar validateFormat = function validateFormat(format) {};\nif (true) {\n    validateFormat = function validateFormat(format) {\n        if (format === undefined) {\n            throw new Error(\"invariant requires an error message argument\");\n        }\n    };\n}\nfunction _invariant(condition, format, a, b, c, d, e, f) {\n    validateFormat(format);\n    if (!condition) {\n        var error;\n        if (format === undefined) {\n            error = new Error(\"Minified exception occurred; use the non-minified dev environment \" + \"for the full error message and additional helpful warnings.\");\n        } else {\n            var args = [\n                a,\n                b,\n                c,\n                d,\n                e,\n                f\n            ];\n            var argIndex = 0;\n            error = new Error(format.replace(/%s/g, function() {\n                return args[argIndex++];\n            }));\n            error.name = \"Invariant Violation\";\n        }\n        error.framesToPop = 1; // we don't care about invariant's own frame\n        throw error;\n    }\n}\nvar warning = function() {};\nif (true) {\n    var printWarning = function printWarning(format) {\n        for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        var argIndex = 0;\n        var message = \"Warning: \" + format.replace(/%s/g, function() {\n            return args[argIndex++];\n        });\n        if (typeof console !== \"undefined\") {\n            console.error(message);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n        } catch (x) {}\n    };\n    warning = function warning(condition, format) {\n        if (format === undefined) {\n            throw new Error(\"`warning(condition, format, ...args)` requires a warning \" + \"message argument\");\n        }\n        if (format.indexOf(\"Failed Composite propType: \") === 0) {\n            return; // Ignore CompositeComponent proptype check.\n        }\n        if (!condition) {\n            for(var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++){\n                args[_key2 - 2] = arguments[_key2];\n            }\n            printWarning.apply(undefined, [\n                format\n            ].concat(args));\n        }\n    };\n}\n// /-- Inlined from fbjs --\nvar MIXINS_KEY = \"mixins\";\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n    return fn;\n}\nvar ReactPropTypeLocationNames;\nif (true) {\n    ReactPropTypeLocationNames = {\n        prop: \"prop\",\n        context: \"context\",\n        childContext: \"child context\"\n    };\n} else {}\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n    /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */ var injectedMixins = [];\n    /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */ var ReactClassInterface = {\n        /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */ mixins: \"DEFINE_MANY\",\n        /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */ statics: \"DEFINE_MANY\",\n        /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */ propTypes: \"DEFINE_MANY\",\n        /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */ contextTypes: \"DEFINE_MANY\",\n        /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */ childContextTypes: \"DEFINE_MANY\",\n        // ==== Definition methods ====\n        /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */ getDefaultProps: \"DEFINE_MANY_MERGED\",\n        /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */ getInitialState: \"DEFINE_MANY_MERGED\",\n        /**\n     * @return {object}\n     * @optional\n     */ getChildContext: \"DEFINE_MANY_MERGED\",\n        /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */ render: \"DEFINE_ONCE\",\n        // ==== Delegate methods ====\n        /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */ componentWillMount: \"DEFINE_MANY\",\n        /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */ componentDidMount: \"DEFINE_MANY\",\n        /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */ componentWillReceiveProps: \"DEFINE_MANY\",\n        /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */ shouldComponentUpdate: \"DEFINE_ONCE\",\n        /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */ componentWillUpdate: \"DEFINE_MANY\",\n        /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */ componentDidUpdate: \"DEFINE_MANY\",\n        /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */ componentWillUnmount: \"DEFINE_MANY\",\n        /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */ UNSAFE_componentWillMount: \"DEFINE_MANY\",\n        /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */ UNSAFE_componentWillReceiveProps: \"DEFINE_MANY\",\n        /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */ UNSAFE_componentWillUpdate: \"DEFINE_MANY\",\n        // ==== Advanced methods ====\n        /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */ updateComponent: \"OVERRIDE_BASE\"\n    };\n    /**\n   * Similar to ReactClassInterface but for static methods.\n   */ var ReactClassStaticInterface = {\n        /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */ getDerivedStateFromProps: \"DEFINE_MANY_MERGED\"\n    };\n    /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */ var RESERVED_SPEC_KEYS = {\n        displayName: function(Constructor, displayName) {\n            Constructor.displayName = displayName;\n        },\n        mixins: function(Constructor, mixins) {\n            if (mixins) {\n                for(var i = 0; i < mixins.length; i++){\n                    mixSpecIntoComponent(Constructor, mixins[i]);\n                }\n            }\n        },\n        childContextTypes: function(Constructor, childContextTypes) {\n            if (true) {\n                validateTypeDef(Constructor, childContextTypes, \"childContext\");\n            }\n            Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n        },\n        contextTypes: function(Constructor, contextTypes) {\n            if (true) {\n                validateTypeDef(Constructor, contextTypes, \"context\");\n            }\n            Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n        },\n        /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */ getDefaultProps: function(Constructor, getDefaultProps) {\n            if (Constructor.getDefaultProps) {\n                Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n            } else {\n                Constructor.getDefaultProps = getDefaultProps;\n            }\n        },\n        propTypes: function(Constructor, propTypes) {\n            if (true) {\n                validateTypeDef(Constructor, propTypes, \"prop\");\n            }\n            Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n        },\n        statics: function(Constructor, statics) {\n            mixStaticSpecIntoComponent(Constructor, statics);\n        },\n        autobind: function() {}\n    };\n    function validateTypeDef(Constructor, typeDef, location) {\n        for(var propName in typeDef){\n            if (typeDef.hasOwnProperty(propName)) {\n                // use a warning instead of an _invariant so components\n                // don't show up in prod but only in __DEV__\n                if (true) {\n                    warning(typeof typeDef[propName] === \"function\", \"%s: %s type `%s` is invalid; it must be a function, usually from \" + \"React.PropTypes.\", Constructor.displayName || \"ReactClass\", ReactPropTypeLocationNames[location], propName);\n                }\n            }\n        }\n    }\n    function validateMethodOverride(isAlreadyDefined, name) {\n        var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n        // Disallow overriding of base class methods unless explicitly allowed.\n        if (ReactClassMixin.hasOwnProperty(name)) {\n            _invariant(specPolicy === \"OVERRIDE_BASE\", \"ReactClassInterface: You are attempting to override \" + \"`%s` from your class specification. Ensure that your method names \" + \"do not overlap with React methods.\", name);\n        }\n        // Disallow defining methods more than once unless explicitly allowed.\n        if (isAlreadyDefined) {\n            _invariant(specPolicy === \"DEFINE_MANY\" || specPolicy === \"DEFINE_MANY_MERGED\", \"ReactClassInterface: You are attempting to define \" + \"`%s` on your component more than once. This conflict may be due \" + \"to a mixin.\", name);\n        }\n    }\n    /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */ function mixSpecIntoComponent(Constructor, spec) {\n        if (!spec) {\n            if (true) {\n                var typeofSpec = typeof spec;\n                var isMixinValid = typeofSpec === \"object\" && spec !== null;\n                if (true) {\n                    warning(isMixinValid, \"%s: You're attempting to include a mixin that is either null \" + \"or not an object. Check the mixins included by the component, \" + \"as well as any mixins they include themselves. \" + \"Expected object but got %s.\", Constructor.displayName || \"ReactClass\", spec === null ? null : typeofSpec);\n                }\n            }\n            return;\n        }\n        _invariant(typeof spec !== \"function\", \"ReactClass: You're attempting to \" + \"use a component class or function as a mixin. Instead, just use a \" + \"regular object.\");\n        _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" + \"use a component as a mixin. Instead, just use a regular object.\");\n        var proto = Constructor.prototype;\n        var autoBindPairs = proto.__reactAutoBindPairs;\n        // By handling mixins before any other properties, we ensure the same\n        // chaining order is applied to methods with DEFINE_MANY policy, whether\n        // mixins are listed before or after these methods in the spec.\n        if (spec.hasOwnProperty(MIXINS_KEY)) {\n            RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n        }\n        for(var name in spec){\n            if (!spec.hasOwnProperty(name)) {\n                continue;\n            }\n            if (name === MIXINS_KEY) {\n                continue;\n            }\n            var property = spec[name];\n            var isAlreadyDefined = proto.hasOwnProperty(name);\n            validateMethodOverride(isAlreadyDefined, name);\n            if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n                RESERVED_SPEC_KEYS[name](Constructor, property);\n            } else {\n                // Setup methods on prototype:\n                // The following member methods should not be automatically bound:\n                // 1. Expected ReactClass methods (in the \"interface\").\n                // 2. Overridden methods (that were mixed in).\n                var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n                var isFunction = typeof property === \"function\";\n                var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n                if (shouldAutoBind) {\n                    autoBindPairs.push(name, property);\n                    proto[name] = property;\n                } else {\n                    if (isAlreadyDefined) {\n                        var specPolicy = ReactClassInterface[name];\n                        // These cases should already be caught by validateMethodOverride.\n                        _invariant(isReactClassMethod && (specPolicy === \"DEFINE_MANY_MERGED\" || specPolicy === \"DEFINE_MANY\"), \"ReactClass: Unexpected spec policy %s for key %s \" + \"when mixing in component specs.\", specPolicy, name);\n                        // For methods which are defined more than once, call the existing\n                        // methods before calling the new property, merging if appropriate.\n                        if (specPolicy === \"DEFINE_MANY_MERGED\") {\n                            proto[name] = createMergedResultFunction(proto[name], property);\n                        } else if (specPolicy === \"DEFINE_MANY\") {\n                            proto[name] = createChainedFunction(proto[name], property);\n                        }\n                    } else {\n                        proto[name] = property;\n                        if (true) {\n                            // Add verbose displayName to the function, which helps when looking\n                            // at profiling tools.\n                            if (typeof property === \"function\" && spec.displayName) {\n                                proto[name].displayName = spec.displayName + \"_\" + name;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    function mixStaticSpecIntoComponent(Constructor, statics) {\n        if (!statics) {\n            return;\n        }\n        for(var name in statics){\n            var property = statics[name];\n            if (!statics.hasOwnProperty(name)) {\n                continue;\n            }\n            var isReserved = name in RESERVED_SPEC_KEYS;\n            _invariant(!isReserved, \"ReactClass: You are attempting to define a reserved \" + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + \"as an instance property instead; it will still be accessible on the \" + \"constructor.\", name);\n            var isAlreadyDefined = name in Constructor;\n            if (isAlreadyDefined) {\n                var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;\n                _invariant(specPolicy === \"DEFINE_MANY_MERGED\", \"ReactClass: You are attempting to define \" + \"`%s` on your component more than once. This conflict may be \" + \"due to a mixin.\", name);\n                Constructor[name] = createMergedResultFunction(Constructor[name], property);\n                return;\n            }\n            Constructor[name] = property;\n        }\n    }\n    /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */ function mergeIntoWithNoDuplicateKeys(one, two) {\n        _invariant(one && two && typeof one === \"object\" && typeof two === \"object\", \"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.\");\n        for(var key in two){\n            if (two.hasOwnProperty(key)) {\n                _invariant(one[key] === undefined, \"mergeIntoWithNoDuplicateKeys(): \" + \"Tried to merge two objects with the same key: `%s`. This conflict \" + \"may be due to a mixin; in particular, this may be caused by two \" + \"getInitialState() or getDefaultProps() methods returning objects \" + \"with clashing keys.\", key);\n                one[key] = two[key];\n            }\n        }\n        return one;\n    }\n    /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */ function createMergedResultFunction(one, two) {\n        return function mergedResult() {\n            var a = one.apply(this, arguments);\n            var b = two.apply(this, arguments);\n            if (a == null) {\n                return b;\n            } else if (b == null) {\n                return a;\n            }\n            var c = {};\n            mergeIntoWithNoDuplicateKeys(c, a);\n            mergeIntoWithNoDuplicateKeys(c, b);\n            return c;\n        };\n    }\n    /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */ function createChainedFunction(one, two) {\n        return function chainedFunction() {\n            one.apply(this, arguments);\n            two.apply(this, arguments);\n        };\n    }\n    /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */ function bindAutoBindMethod(component, method) {\n        var boundMethod = method.bind(component);\n        if (true) {\n            boundMethod.__reactBoundContext = component;\n            boundMethod.__reactBoundMethod = method;\n            boundMethod.__reactBoundArguments = null;\n            var componentName = component.constructor.displayName;\n            var _bind = boundMethod.bind;\n            boundMethod.bind = function(newThis) {\n                for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                // User is trying to bind() an autobound method; we effectively will\n                // ignore the value of \"this\" that the user is trying to use, so\n                // let's warn.\n                if (newThis !== component && newThis !== null) {\n                    if (true) {\n                        warning(false, \"bind(): React component methods may only be bound to the \" + \"component instance. See %s\", componentName);\n                    }\n                } else if (!args.length) {\n                    if (true) {\n                        warning(false, \"bind(): You are binding a component method to the component. \" + \"React does this for you automatically in a high-performance \" + \"way, so you can safely remove this call. See %s\", componentName);\n                    }\n                    return boundMethod;\n                }\n                var reboundMethod = _bind.apply(boundMethod, arguments);\n                reboundMethod.__reactBoundContext = component;\n                reboundMethod.__reactBoundMethod = method;\n                reboundMethod.__reactBoundArguments = args;\n                return reboundMethod;\n            };\n        }\n        return boundMethod;\n    }\n    /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */ function bindAutoBindMethods(component) {\n        var pairs = component.__reactAutoBindPairs;\n        for(var i = 0; i < pairs.length; i += 2){\n            var autoBindKey = pairs[i];\n            var method = pairs[i + 1];\n            component[autoBindKey] = bindAutoBindMethod(component, method);\n        }\n    }\n    var IsMountedPreMixin = {\n        componentDidMount: function() {\n            this.__isMounted = true;\n        }\n    };\n    var IsMountedPostMixin = {\n        componentWillUnmount: function() {\n            this.__isMounted = false;\n        }\n    };\n    /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */ var ReactClassMixin = {\n        /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */ replaceState: function(newState, callback) {\n            this.updater.enqueueReplaceState(this, newState, callback);\n        },\n        /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */ isMounted: function() {\n            if (true) {\n                warning(this.__didWarnIsMounted, \"%s: isMounted is deprecated. Instead, make sure to clean up \" + \"subscriptions and pending requests in componentWillUnmount to \" + \"prevent memory leaks.\", this.constructor && this.constructor.displayName || this.name || \"Component\");\n                this.__didWarnIsMounted = true;\n            }\n            return !!this.__isMounted;\n        }\n    };\n    var ReactClassComponent = function() {};\n    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n    /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */ function createClass(spec) {\n        // To keep our warnings more understandable, we'll use a little hack here to\n        // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n        // unnecessarily identify a class without displayName as 'Constructor'.\n        var Constructor = identity(function(props, context, updater) {\n            // This constructor gets overridden by mocks. The argument is used\n            // by mocks to assert on what gets mounted.\n            if (true) {\n                warning(this instanceof Constructor, \"Something is calling a React component directly. Use a factory or \" + \"JSX instead. See: https://fb.me/react-legacyfactory\");\n            }\n            // Wire up auto-binding\n            if (this.__reactAutoBindPairs.length) {\n                bindAutoBindMethods(this);\n            }\n            this.props = props;\n            this.context = context;\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n            this.state = null;\n            // ReactClasses doesn't have constructors. Instead, they use the\n            // getInitialState and componentWillMount methods for initialization.\n            var initialState = this.getInitialState ? this.getInitialState() : null;\n            if (true) {\n                // We allow auto-mocks to proceed as if they're returning null.\n                if (initialState === undefined && this.getInitialState._isMockFunction) {\n                    // This is probably bad practice. Consider warning here and\n                    // deprecating this convenience.\n                    initialState = null;\n                }\n            }\n            _invariant(typeof initialState === \"object\" && !Array.isArray(initialState), \"%s.getInitialState(): must return an object or null\", Constructor.displayName || \"ReactCompositeComponent\");\n            this.state = initialState;\n        });\n        Constructor.prototype = new ReactClassComponent();\n        Constructor.prototype.constructor = Constructor;\n        Constructor.prototype.__reactAutoBindPairs = [];\n        injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n        mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n        mixSpecIntoComponent(Constructor, spec);\n        mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n        // Initialize the defaultProps property after all mixins have been merged.\n        if (Constructor.getDefaultProps) {\n            Constructor.defaultProps = Constructor.getDefaultProps();\n        }\n        if (true) {\n            // This is a tag to indicate that the use of these method names is ok,\n            // since it's used with createClass. If it's not, then it's likely a\n            // mistake so we'll warn you to use the static property, property\n            // initializer or constructor respectively.\n            if (Constructor.getDefaultProps) {\n                Constructor.getDefaultProps.isReactClassApproved = {};\n            }\n            if (Constructor.prototype.getInitialState) {\n                Constructor.prototype.getInitialState.isReactClassApproved = {};\n            }\n        }\n        _invariant(Constructor.prototype.render, \"createClass(...): Class specification must implement a `render` method.\");\n        if (true) {\n            warning(!Constructor.prototype.componentShouldUpdate, \"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", spec.displayName || \"A component\");\n            warning(!Constructor.prototype.componentWillRecieveProps, \"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", spec.displayName || \"A component\");\n            warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, \"%s has a method called UNSAFE_componentWillRecieveProps(). \" + \"Did you mean UNSAFE_componentWillReceiveProps()?\", spec.displayName || \"A component\");\n        }\n        // Reduce time spent doing lookups by setting these on the prototype.\n        for(var methodName in ReactClassInterface){\n            if (!Constructor.prototype[methodName]) {\n                Constructor.prototype[methodName] = null;\n            }\n        }\n        return Constructor;\n    }\n    return createClass;\n}\nmodule.exports = factory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/create-react-class/factory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/create-react-class/index.js":
/*!**************************************************!*\
  !*** ./node_modules/create-react-class/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar factory = __webpack_require__(/*! ./factory */ \"(ssr)/./node_modules/create-react-class/factory.js\");\nif (typeof React === \"undefined\") {\n    throw Error(\"create-react-class could not find the React object. If you are using script tags, \" + \"make sure that React is being loaded before create-react-class.\");\n}\n// Hack to grab NoopUpdateQueue from isomorphic React\nvar ReactNoopUpdateQueue = new React.Component().updater;\nmodule.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUVEO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsVUFBVUQsbUJBQU9BLENBQUM7QUFFdEIsSUFBSSxPQUFPRCxVQUFVLGFBQWE7SUFDaEMsTUFBTUcsTUFDSix1RkFDRTtBQUVOO0FBRUEscURBQXFEO0FBQ3JELElBQUlDLHVCQUF1QixJQUFJSixNQUFNSyxTQUFTLEdBQUdDLE9BQU87QUFFeERDLE9BQU9DLE9BQU8sR0FBR04sUUFDZkYsTUFBTUssU0FBUyxFQUNmTCxNQUFNUyxjQUFjLEVBQ3BCTCIsInNvdXJjZXMiOlsid2VicGFjazovL29saS1jcm9zc2xhbmQtdmlkZW9ncmFwaHkvLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL2luZGV4LmpzP2JkOTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGZhY3RvcnkgPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcblxuaWYgKHR5cGVvZiBSZWFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdGhyb3cgRXJyb3IoXG4gICAgJ2NyZWF0ZS1yZWFjdC1jbGFzcyBjb3VsZCBub3QgZmluZCB0aGUgUmVhY3Qgb2JqZWN0LiBJZiB5b3UgYXJlIHVzaW5nIHNjcmlwdCB0YWdzLCAnICtcbiAgICAgICdtYWtlIHN1cmUgdGhhdCBSZWFjdCBpcyBiZWluZyBsb2FkZWQgYmVmb3JlIGNyZWF0ZS1yZWFjdC1jbGFzcy4nXG4gICk7XG59XG5cbi8vIEhhY2sgdG8gZ3JhYiBOb29wVXBkYXRlUXVldWUgZnJvbSBpc29tb3JwaGljIFJlYWN0XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSBuZXcgUmVhY3QuQ29tcG9uZW50KCkudXBkYXRlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICBSZWFjdC5Db21wb25lbnQsXG4gIFJlYWN0LmlzVmFsaWRFbGVtZW50LFxuICBSZWFjdE5vb3BVcGRhdGVRdWV1ZVxuKTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJmYWN0b3J5IiwiRXJyb3IiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsIkNvbXBvbmVudCIsInVwZGF0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNWYWxpZEVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/create-react-class/index.js\n");

/***/ })

};
;