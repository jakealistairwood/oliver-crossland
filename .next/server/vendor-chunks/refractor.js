"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/refractor";
exports.ids = ["vendor-chunks/refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/refractor/core.js":
/*!****************************************!*\
  !*** ./node_modules/refractor/core.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* global window, self */ // istanbul ignore next - Don't allow Prism to run on page load in browser or\n// to start messaging from workers.\nvar ctx = typeof globalThis === \"object\" ? globalThis : typeof self === \"object\" ? self :  false ? 0 : typeof global === \"object\" ? global : {};\nvar restore = capture();\nctx.Prism = {\n    manual: true,\n    disableWorkerMessageHandler: true\n};\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\nvar h = __webpack_require__(/*! hastscript */ \"(ssr)/./node_modules/hastscript/index.js\");\nvar decode = __webpack_require__(/*! parse-entities */ \"(ssr)/./node_modules/parse-entities/index.js\");\nvar Prism = __webpack_require__(/*! prismjs/components/prism-core */ \"(ssr)/./node_modules/prismjs/components/prism-core.js\");\nvar markup = __webpack_require__(/*! ./lang/markup */ \"(ssr)/./node_modules/refractor/lang/markup.js\");\nvar css = __webpack_require__(/*! ./lang/css */ \"(ssr)/./node_modules/refractor/lang/css.js\");\nvar clike = __webpack_require__(/*! ./lang/clike */ \"(ssr)/./node_modules/refractor/lang/clike.js\");\nvar js = __webpack_require__(/*! ./lang/javascript */ \"(ssr)/./node_modules/refractor/lang/javascript.js\");\nrestore();\nvar own = {}.hasOwnProperty;\n// Inherit.\nfunction Refractor() {}\nRefractor.prototype = Prism;\n// Construct.\nvar refract = new Refractor();\n// Expose.\nmodule.exports = refract;\n// Create.\nrefract.highlight = highlight;\nrefract.register = register;\nrefract.alias = alias;\nrefract.registered = registered;\nrefract.listLanguages = listLanguages;\n// Register bundled grammars.\nregister(markup);\nregister(css);\nregister(clike);\nregister(js);\nrefract.util.encode = encode;\nrefract.Token.stringify = stringify;\nfunction register(grammar) {\n    if (typeof grammar !== \"function\" || !grammar.displayName) {\n        throw new Error(\"Expected `function` for `grammar`, got `\" + grammar + \"`\");\n    }\n    // Do not duplicate registrations.\n    if (refract.languages[grammar.displayName] === undefined) {\n        grammar(refract);\n    }\n}\nfunction alias(name, alias) {\n    var languages = refract.languages;\n    var map = name;\n    var key;\n    var list;\n    var length;\n    var index;\n    if (alias) {\n        map = {};\n        map[name] = alias;\n    }\n    for(key in map){\n        list = map[key];\n        list = typeof list === \"string\" ? [\n            list\n        ] : list;\n        length = list.length;\n        index = -1;\n        while(++index < length){\n            languages[list[index]] = languages[key];\n        }\n    }\n}\nfunction highlight(value, name) {\n    var sup = Prism.highlight;\n    var grammar;\n    if (typeof value !== \"string\") {\n        throw new Error(\"Expected `string` for `value`, got `\" + value + \"`\");\n    }\n    // `name` is a grammar object.\n    if (refract.util.type(name) === \"Object\") {\n        grammar = name;\n        name = null;\n    } else {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Expected `string` for `name`, got `\" + name + \"`\");\n        }\n        if (own.call(refract.languages, name)) {\n            grammar = refract.languages[name];\n        } else {\n            throw new Error(\"Unknown language: `\" + name + \"` is not registered\");\n        }\n    }\n    return sup.call(this, value, grammar, name);\n}\nfunction registered(language) {\n    if (typeof language !== \"string\") {\n        throw new Error(\"Expected `string` for `language`, got `\" + language + \"`\");\n    }\n    return own.call(refract.languages, language);\n}\nfunction listLanguages() {\n    var languages = refract.languages;\n    var list = [];\n    var language;\n    for(language in languages){\n        if (own.call(languages, language) && typeof languages[language] === \"object\") {\n            list.push(language);\n        }\n    }\n    return list;\n}\nfunction stringify(value, language, parent) {\n    var env;\n    if (typeof value === \"string\") {\n        return {\n            type: \"text\",\n            value: value\n        };\n    }\n    if (refract.util.type(value) === \"Array\") {\n        return stringifyAll(value, language);\n    }\n    env = {\n        type: value.type,\n        content: refract.Token.stringify(value.content, language, parent),\n        tag: \"span\",\n        classes: [\n            \"token\",\n            value.type\n        ],\n        attributes: {},\n        language: language,\n        parent: parent\n    };\n    if (value.alias) {\n        env.classes = env.classes.concat(value.alias);\n    }\n    refract.hooks.run(\"wrap\", env);\n    return h(env.tag + \".\" + env.classes.join(\".\"), attributes(env.attributes), env.content);\n}\nfunction stringifyAll(values, language) {\n    var result = [];\n    var length = values.length;\n    var index = -1;\n    var value;\n    while(++index < length){\n        value = values[index];\n        if (value !== \"\" && value !== null && value !== undefined) {\n            result.push(value);\n        }\n    }\n    index = -1;\n    length = result.length;\n    while(++index < length){\n        value = result[index];\n        result[index] = refract.Token.stringify(value, language, result);\n    }\n    return result;\n}\nfunction encode(tokens) {\n    return tokens;\n}\nfunction attributes(attrs) {\n    var key;\n    for(key in attrs){\n        attrs[key] = decode(attrs[key]);\n    }\n    return attrs;\n}\nfunction capture() {\n    var defined = \"Prism\" in ctx;\n    /* istanbul ignore next */ var current = defined ? ctx.Prism : undefined;\n    return restore;\n    function restore() {\n        /* istanbul ignore else - Clean leaks after Prism. */ if (defined) {\n            ctx.Prism = current;\n        } else {\n            delete ctx.Prism;\n        }\n        defined = undefined;\n        current = undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bash.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/bash.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = bash;\nbash.displayName = \"bash\";\nbash.aliases = [\n    \"shell\"\n];\nfunction bash(Prism) {\n    ;\n    (function(Prism) {\n        // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n        // + LC_ALL, RANDOM, REPLY, SECONDS.\n        // + make sure PS1..4 are here as they are not always set,\n        // - some useless things.\n        var envVars = \"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\";\n        var commandAfterHeredoc = {\n            pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n            lookbehind: true,\n            alias: \"punctuation\",\n            // this looks reasonably well in all themes\n            inside: null // see below\n        };\n        var insideString = {\n            bash: commandAfterHeredoc,\n            environment: {\n                pattern: RegExp(\"\\\\$\" + envVars),\n                alias: \"constant\"\n            },\n            variable: [\n                // [0]: Arithmetic Environment\n                {\n                    pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n                    greedy: true,\n                    inside: {\n                        // If there is a $ sign at the beginning highlight $(( and )) as variable\n                        variable: [\n                            {\n                                pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n                                lookbehind: true\n                            },\n                            /^\\$\\(\\(/\n                        ],\n                        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n                        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n                        operator: /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n                        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n                        punctuation: /\\(\\(?|\\)\\)?|,|;/\n                    }\n                },\n                {\n                    pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n                    greedy: true,\n                    inside: {\n                        variable: /^\\$\\(|^`|\\)$|`$/\n                    }\n                },\n                {\n                    pattern: /\\$\\{[^}]+\\}/,\n                    greedy: true,\n                    inside: {\n                        operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n                        punctuation: /[\\[\\]]/,\n                        environment: {\n                            pattern: RegExp(\"(\\\\{)\" + envVars),\n                            lookbehind: true,\n                            alias: \"constant\"\n                        }\n                    }\n                },\n                /\\$(?:\\w+|[#?*!@$])/\n            ],\n            // Escape sequences from echo and printf's manuals, and escaped quotes.\n            entity: /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n        };\n        Prism.languages.bash = {\n            shebang: {\n                pattern: /^#!\\s*\\/.*/,\n                alias: \"important\"\n            },\n            comment: {\n                pattern: /(^|[^\"{\\\\$])#.*/,\n                lookbehind: true\n            },\n            \"function-name\": [\n                // a) function foo {\n                // b) foo() {\n                // c) function foo() {\n                // but not “foo {”\n                {\n                    // a) and c)\n                    pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n                    lookbehind: true,\n                    alias: \"function\"\n                },\n                {\n                    // b)\n                    pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n                    alias: \"function\"\n                }\n            ],\n            // Highlight variable names as variables in for and select beginnings.\n            \"for-or-select\": {\n                pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n                alias: \"variable\",\n                lookbehind: true\n            },\n            // Highlight variable names as variables in the left-hand part\n            // of assignments (“=” and “+=”).\n            \"assign-left\": {\n                pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n                inside: {\n                    environment: {\n                        pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n                        lookbehind: true,\n                        alias: \"constant\"\n                    }\n                },\n                alias: \"variable\",\n                lookbehind: true\n            },\n            string: [\n                // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n                {\n                    pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: insideString\n                },\n                // → No expansion (so no “inside”).\n                {\n                    pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: {\n                        bash: commandAfterHeredoc\n                    }\n                },\n                {\n                    // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n                    pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: insideString\n                },\n                {\n                    // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n                    pattern: /(^|[^$\\\\])'[^']*'/,\n                    lookbehind: true,\n                    greedy: true\n                },\n                {\n                    // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n                    pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n                    greedy: true,\n                    inside: {\n                        entity: insideString.entity\n                    }\n                }\n            ],\n            environment: {\n                pattern: RegExp(\"\\\\$?\" + envVars),\n                alias: \"constant\"\n            },\n            variable: insideString.variable,\n            function: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n                lookbehind: true\n            },\n            keyword: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n                lookbehind: true\n            },\n            // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n            builtin: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n                lookbehind: true,\n                // Alias added to make those easier to distinguish from strings.\n                alias: \"class-name\"\n            },\n            boolean: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n                lookbehind: true\n            },\n            \"file-descriptor\": {\n                pattern: /\\B&\\d\\b/,\n                alias: \"important\"\n            },\n            operator: {\n                // Lots of redirections here, but not just that.\n                pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n                inside: {\n                    \"file-descriptor\": {\n                        pattern: /^\\d/,\n                        alias: \"important\"\n                    }\n                }\n            },\n            punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n            number: {\n                pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n                lookbehind: true\n            }\n        };\n        commandAfterHeredoc.inside = Prism.languages.bash;\n        /* Patterns in command substitution. */ var toBeCopied = [\n            \"comment\",\n            \"function-name\",\n            \"for-or-select\",\n            \"assign-left\",\n            \"string\",\n            \"environment\",\n            \"function\",\n            \"keyword\",\n            \"builtin\",\n            \"boolean\",\n            \"file-descriptor\",\n            \"operator\",\n            \"punctuation\",\n            \"number\"\n        ];\n        var inside = insideString.variable[1].inside;\n        for(var i = 0; i < toBeCopied.length; i++){\n            inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n        }\n        Prism.languages.shell = Prism.languages.bash;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/clike.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/clike.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = clike;\nclike.displayName = \"clike\";\nclike.aliases = [];\nfunction clike(Prism) {\n    Prism.languages.clike = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        string: {\n            pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: true\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n            lookbehind: true,\n            inside: {\n                punctuation: /[.\\\\]/\n            }\n        },\n        keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        function: /\\b\\w+(?=\\()/,\n        number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n        operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n        punctuation: /[{}[\\];(),.:]/\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsTUFBTUMsV0FBVyxHQUFHO0FBQ3BCRCxNQUFNRSxPQUFPLEdBQUcsRUFBRTtBQUNsQixTQUFTRixNQUFNRyxLQUFLO0lBQ2xCQSxNQUFNQyxTQUFTLENBQUNKLEtBQUssR0FBRztRQUN0QkssU0FBUztZQUNQO2dCQUNFQyxTQUFTO2dCQUNUQyxZQUFZO2dCQUNaQyxRQUFRO1lBQ1Y7WUFDQTtnQkFDRUYsU0FBUztnQkFDVEMsWUFBWTtnQkFDWkMsUUFBUTtZQUNWO1NBQ0Q7UUFDREMsUUFBUTtZQUNOSCxTQUFTO1lBQ1RFLFFBQVE7UUFDVjtRQUNBLGNBQWM7WUFDWkYsU0FDRTtZQUNGQyxZQUFZO1lBQ1pHLFFBQVE7Z0JBQ05DLGFBQWE7WUFDZjtRQUNGO1FBQ0FDLFNBQ0U7UUFDRkMsU0FBUztRQUNUQyxVQUFVO1FBQ1ZDLFFBQVE7UUFDUkMsVUFBVTtRQUNWTCxhQUFhO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL29saS1jcm9zc2xhbmQtdmlkZW9ncmFwaHkvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xpa2UuanM/NDgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjbGlrZVxuY2xpa2UuZGlzcGxheU5hbWUgPSAnY2xpa2UnXG5jbGlrZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNsaWtlKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5jbGlrZSA9IHtcbiAgICBjb21tZW50OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXFxiKD86Y2xhc3N8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3x0cmFpdClcXHMrfFxcYmNhdGNoXFxzK1xcKClbXFx3LlxcXFxdKy9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL1suXFxcXF0vXG4gICAgICB9XG4gICAgfSxcbiAgICBrZXl3b3JkOlxuICAgICAgL1xcYig/OmJyZWFrfGNhdGNofGNvbnRpbnVlfGRvfGVsc2V8ZmluYWxseXxmb3J8ZnVuY3Rpb258aWZ8aW58aW5zdGFuY2VvZnxuZXd8bnVsbHxyZXR1cm58dGhyb3d8dHJ5fHdoaWxlKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcYlxcdysoPz1cXCgpLyxcbiAgICBudW1iZXI6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksXG4gICAgb3BlcmF0b3I6IC9bPD5dPT98WyE9XT0/PT98LS0/fFxcK1xcKz98JiY/fFxcfFxcfD98Wz8qL35eJV0vLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXTsoKSwuOl0vXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY2xpa2UiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsInN0cmluZyIsImluc2lkZSIsInB1bmN0dWF0aW9uIiwia2V5d29yZCIsImJvb2xlYW4iLCJmdW5jdGlvbiIsIm51bWJlciIsIm9wZXJhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/clike.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/css.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/css.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nmodule.exports = css;\ncss.displayName = \"css\";\ncss.aliases = [];\nfunction css(Prism) {\n    ;\n    (function(Prism) {\n        var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n        Prism.languages.css = {\n            comment: /\\/\\*[\\s\\S]*?\\*\\//,\n            atrule: {\n                pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n                inside: {\n                    rule: /^@[\\w-]+/,\n                    \"selector-function-argument\": {\n                        pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                        lookbehind: true,\n                        alias: \"selector\"\n                    },\n                    keyword: {\n                        pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                        lookbehind: true\n                    } // See rest below\n                }\n            },\n            url: {\n                // https://drafts.csswg.org/css-values-3/#urls\n                pattern: RegExp(\"\\\\burl\\\\((?:\" + string.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n                greedy: true,\n                inside: {\n                    function: /^url/i,\n                    punctuation: /^\\(|\\)$/,\n                    string: {\n                        pattern: RegExp(\"^\" + string.source + \"$\"),\n                        alias: \"url\"\n                    }\n                }\n            },\n            selector: {\n                pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + string.source + \")*(?=\\\\s*\\\\{)\"),\n                lookbehind: true\n            },\n            string: {\n                pattern: string,\n                greedy: true\n            },\n            property: {\n                pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n                lookbehind: true\n            },\n            important: /!important\\b/i,\n            function: {\n                pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n                lookbehind: true\n            },\n            punctuation: /[(){};:,]/\n        };\n        Prism.languages.css[\"atrule\"].inside.rest = Prism.languages.css;\n        var markup = Prism.languages.markup;\n        if (markup) {\n            markup.tag.addInlined(\"style\", \"css\");\n            markup.tag.addAttribute(\"style\", \"css\");\n        }\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLElBQUlDLFdBQVcsR0FBRztBQUNsQkQsSUFBSUUsT0FBTyxHQUFHLEVBQUU7QUFDaEIsU0FBU0YsSUFBSUcsS0FBSzs7SUFDZCxVQUFVQSxLQUFLO1FBQ2YsSUFBSUMsU0FDRjtRQUNGRCxNQUFNRSxTQUFTLENBQUNMLEdBQUcsR0FBRztZQUNwQk0sU0FBUztZQUNUQyxRQUFRO2dCQUNOQyxTQUFTO2dCQUNUQyxRQUFRO29CQUNOQyxNQUFNO29CQUNOLDhCQUE4Qjt3QkFDNUJGLFNBQ0U7d0JBQ0ZHLFlBQVk7d0JBQ1pDLE9BQU87b0JBQ1Q7b0JBQ0FDLFNBQVM7d0JBQ1BMLFNBQVM7d0JBQ1RHLFlBQVk7b0JBQ2QsRUFBRSxpQkFBaUI7Z0JBQ3JCO1lBQ0Y7WUFDQUcsS0FBSztnQkFDSCw4Q0FBOEM7Z0JBQzlDTixTQUFTTyxPQUNQLGlCQUNFWCxPQUFPWSxNQUFNLEdBQ2IsTUFDQSw4QkFBOEJBLE1BQU0sR0FDcEMsUUFDRjtnQkFFRkMsUUFBUTtnQkFDUlIsUUFBUTtvQkFDTlMsVUFBVTtvQkFDVkMsYUFBYTtvQkFDYmYsUUFBUTt3QkFDTkksU0FBU08sT0FBTyxNQUFNWCxPQUFPWSxNQUFNLEdBQUc7d0JBQ3RDSixPQUFPO29CQUNUO2dCQUNGO1lBQ0Y7WUFDQVEsVUFBVTtnQkFDUlosU0FBU08sT0FDUCx1REFDRVgsT0FBT1ksTUFBTSxHQUNiO2dCQUVKTCxZQUFZO1lBQ2Q7WUFDQVAsUUFBUTtnQkFDTkksU0FBU0o7Z0JBQ1RhLFFBQVE7WUFDVjtZQUNBSSxVQUFVO2dCQUNSYixTQUNFO2dCQUNGRyxZQUFZO1lBQ2Q7WUFDQVcsV0FBVztZQUNYSixVQUFVO2dCQUNSVixTQUFTO2dCQUNURyxZQUFZO1lBQ2Q7WUFDQVEsYUFBYTtRQUNmO1FBQ0FoQixNQUFNRSxTQUFTLENBQUNMLEdBQUcsQ0FBQyxTQUFTLENBQUNTLE1BQU0sQ0FBQ2MsSUFBSSxHQUFHcEIsTUFBTUUsU0FBUyxDQUFDTCxHQUFHO1FBQy9ELElBQUl3QixTQUFTckIsTUFBTUUsU0FBUyxDQUFDbUIsTUFBTTtRQUNuQyxJQUFJQSxRQUFRO1lBQ1ZBLE9BQU9DLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLFNBQVM7WUFDL0JGLE9BQU9DLEdBQUcsQ0FBQ0UsWUFBWSxDQUFDLFNBQVM7UUFDbkM7SUFDRixHQUFHeEI7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL29saS1jcm9zc2xhbmQtdmlkZW9ncmFwaHkvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3NzLmpzPzdiYzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY3NzXG5jc3MuZGlzcGxheU5hbWUgPSAnY3NzJ1xuY3NzLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gY3NzKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIHN0cmluZyA9XG4gICAgICAvKD86XCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlwiXFxcXFxcclxcbl0pKlwifCcoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXidcXFxcXFxyXFxuXSkqJykvXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmNzcyA9IHtcbiAgICAgIGNvbW1lbnQ6IC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcbiAgICAgIGF0cnVsZToge1xuICAgICAgICBwYXR0ZXJuOiAvQFtcXHctXSg/OlteO3tcXHNdfFxccysoPyFbXFxze10pKSooPzo7fCg/PVxccypcXHspKS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHJ1bGU6IC9eQFtcXHctXSsvLFxuICAgICAgICAgICdzZWxlY3Rvci1mdW5jdGlvbi1hcmd1bWVudCc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAgIC8oXFxic2VsZWN0b3JcXHMqXFwoXFxzKig/IVtcXHMpXSkpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCkpKyg/PVxccypcXCkpLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ3NlbGVjdG9yJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5d29yZDoge1xuICAgICAgICAgICAgcGF0dGVybjogLyhefFteXFx3LV0pKD86YW5kfG5vdHxvbmx5fG9yKSg/IVtcXHctXSkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH0gLy8gU2VlIHJlc3QgYmVsb3dcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVybDoge1xuICAgICAgICAvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAnXFxcXGJ1cmxcXFxcKCg/OicgK1xuICAgICAgICAgICAgc3RyaW5nLnNvdXJjZSArXG4gICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgLyg/OlteXFxcXFxcclxcbigpXCInXXxcXFxcW1xcc1xcU10pKi8uc291cmNlICtcbiAgICAgICAgICAgICcpXFxcXCknLFxuICAgICAgICAgICdpJ1xuICAgICAgICApLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGZ1bmN0aW9uOiAvXnVybC9pLFxuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXlxcKHxcXCkkLyxcbiAgICAgICAgICBzdHJpbmc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cCgnXicgKyBzdHJpbmcuc291cmNlICsgJyQnKSxcbiAgICAgICAgICAgIGFsaWFzOiAndXJsJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNlbGVjdG9yOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAnKF58W3t9XFxcXHNdKVtee31cXFxcc10oPzpbXnt9O1wiXFwnXFxcXHNdfFxcXFxzKyg/IVtcXFxcc3tdKXwnICtcbiAgICAgICAgICAgIHN0cmluZy5zb3VyY2UgK1xuICAgICAgICAgICAgJykqKD89XFxcXHMqXFxcXHspJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IHN0cmluZyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgcHJvcGVydHk6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W14tXFx3XFx4QTAtXFx1RkZGRl0pKD8hXFxzKVstX2EtelxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVstXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyo6KS9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgaW1wb3J0YW50OiAvIWltcG9ydGFudFxcYi9pLFxuICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgcGF0dGVybjogLyhefFteLWEtejAtOV0pWy1hLXowLTldKyg/PVxcKCkvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpe307OixdL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuY3NzWydhdHJ1bGUnXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5jc3NcbiAgICB2YXIgbWFya3VwID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFxuICAgIGlmIChtYXJrdXApIHtcbiAgICAgIG1hcmt1cC50YWcuYWRkSW5saW5lZCgnc3R5bGUnLCAnY3NzJylcbiAgICAgIG1hcmt1cC50YWcuYWRkQXR0cmlidXRlKCdzdHlsZScsICdjc3MnKVxuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNzcyIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwic3RyaW5nIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsImF0cnVsZSIsInBhdHRlcm4iLCJpbnNpZGUiLCJydWxlIiwibG9va2JlaGluZCIsImFsaWFzIiwia2V5d29yZCIsInVybCIsIlJlZ0V4cCIsInNvdXJjZSIsImdyZWVkeSIsImZ1bmN0aW9uIiwicHVuY3R1YXRpb24iLCJzZWxlY3RvciIsInByb3BlcnR5IiwiaW1wb3J0YW50IiwicmVzdCIsIm1hcmt1cCIsInRhZyIsImFkZElubGluZWQiLCJhZGRBdHRyaWJ1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javascript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/javascript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = javascript;\njavascript.displayName = \"javascript\";\njavascript.aliases = [\n    \"js\"\n];\nfunction javascript(Prism) {\n    Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n        \"class-name\": [\n            Prism.languages.clike[\"class-name\"],\n            {\n                pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n                lookbehind: true\n            }\n        ],\n        keyword: [\n            {\n                pattern: /((?:^|\\})\\s*)catch\\b/,\n                lookbehind: true\n            },\n            {\n                pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n                lookbehind: true\n            }\n        ],\n        // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n        function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n        number: {\n            pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + // constant\n            (/NaN|Infinity/.source + \"|\" + // binary integer\n            /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n            /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n            /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n            /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n            /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source),\n            lookbehind: true\n        },\n        operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n    });\n    Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n    Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n        regex: {\n            // eslint-disable-next-line regexp/no-dupe-characters-character-class\n            pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"regex-source\": {\n                    pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                    lookbehind: true,\n                    alias: \"language-regex\",\n                    inside: Prism.languages.regex\n                },\n                \"regex-delimiter\": /^\\/|\\/$/,\n                \"regex-flags\": /^[a-z]+$/\n            }\n        },\n        // This must be declared before keyword because we use \"function\" inside the look-forward\n        \"function-variable\": {\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n            alias: \"function\"\n        },\n        parameter: [\n            {\n                pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            }\n        ],\n        constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n    });\n    Prism.languages.insertBefore(\"javascript\", \"string\", {\n        hashbang: {\n            pattern: /^#!.*/,\n            greedy: true,\n            alias: \"comment\"\n        },\n        \"template-string\": {\n            pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n            greedy: true,\n            inside: {\n                \"template-punctuation\": {\n                    pattern: /^`|`$/,\n                    alias: \"string\"\n                },\n                interpolation: {\n                    pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                    lookbehind: true,\n                    inside: {\n                        \"interpolation-punctuation\": {\n                            pattern: /^\\$\\{|\\}$/,\n                            alias: \"punctuation\"\n                        },\n                        rest: Prism.languages.javascript\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        },\n        \"string-property\": {\n            pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n            lookbehind: true,\n            greedy: true,\n            alias: \"property\"\n        }\n    });\n    Prism.languages.insertBefore(\"javascript\", \"operator\", {\n        \"literal-property\": {\n            pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n            lookbehind: true,\n            alias: \"property\"\n        }\n    });\n    if (Prism.languages.markup) {\n        Prism.languages.markup.tag.addInlined(\"script\", \"javascript\") // add attribute support for all DOM events.\n        ;\n        // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n        Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\");\n    }\n    Prism.languages.js = Prism.languages.javascript;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/json.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/json.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = json;\njson.displayName = \"json\";\njson.aliases = [\n    \"webmanifest\"\n];\nfunction json(Prism) {\n    // https://www.json.org/json-en.html\n    Prism.languages.json = {\n        property: {\n            pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n            lookbehind: true,\n            greedy: true\n        },\n        string: {\n            pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n            lookbehind: true,\n            greedy: true\n        },\n        comment: {\n            pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            greedy: true\n        },\n        number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n        punctuation: /[{}[\\],]/,\n        operator: /:/,\n        boolean: /\\b(?:false|true)\\b/,\n        null: {\n            pattern: /\\bnull\\b/,\n            alias: \"keyword\"\n        }\n    };\n    Prism.languages.webmanifest = Prism.languages.json;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxLQUFLQyxXQUFXLEdBQUc7QUFDbkJELEtBQUtFLE9BQU8sR0FBRztJQUFDO0NBQWM7QUFDOUIsU0FBU0YsS0FBS0csS0FBSztJQUNqQixvQ0FBb0M7SUFDcENBLE1BQU1DLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO1FBQ3JCSyxVQUFVO1lBQ1JDLFNBQVM7WUFDVEMsWUFBWTtZQUNaQyxRQUFRO1FBQ1Y7UUFDQUMsUUFBUTtZQUNOSCxTQUFTO1lBQ1RDLFlBQVk7WUFDWkMsUUFBUTtRQUNWO1FBQ0FFLFNBQVM7WUFDUEosU0FBUztZQUNURSxRQUFRO1FBQ1Y7UUFDQUcsUUFBUTtRQUNSQyxhQUFhO1FBQ2JDLFVBQVU7UUFDVkMsU0FBUztRQUNUQyxNQUFNO1lBQ0pULFNBQVM7WUFDVFUsT0FBTztRQUNUO0lBQ0Y7SUFDQWIsTUFBTUMsU0FBUyxDQUFDYSxXQUFXLEdBQUdkLE1BQU1DLFNBQVMsQ0FBQ0osSUFBSTtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovL29saS1jcm9zc2xhbmQtdmlkZW9ncmFwaHkvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNvbi5qcz9iNzMyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzb25cbmpzb24uZGlzcGxheU5hbWUgPSAnanNvbidcbmpzb24uYWxpYXNlcyA9IFsnd2VibWFuaWZlc3QnXVxuZnVuY3Rpb24ganNvbihQcmlzbSkge1xuICAvLyBodHRwczovL3d3dy5qc29uLm9yZy9qc29uLWVuLmh0bWxcbiAgUHJpc20ubGFuZ3VhZ2VzLmpzb24gPSB7XG4gICAgcHJvcGVydHk6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/PVxccyo6KS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/IVxccyo6KS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXFwvXFwvLip8XFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIG51bWJlcjogLy0/XFxiXFxkKyg/OlxcLlxcZCspPyg/OmVbKy1dP1xcZCspP1xcYi9pLFxuICAgIHB1bmN0dWF0aW9uOiAvW3t9W1xcXSxdLyxcbiAgICBvcGVyYXRvcjogLzovLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgbnVsbDoge1xuICAgICAgcGF0dGVybjogL1xcYm51bGxcXGIvLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH1cbiAgfVxuICBQcmlzbS5sYW5ndWFnZXMud2VibWFuaWZlc3QgPSBQcmlzbS5sYW5ndWFnZXMuanNvblxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJwcm9wZXJ0eSIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwiY29tbWVudCIsIm51bWJlciIsInB1bmN0dWF0aW9uIiwib3BlcmF0b3IiLCJib29sZWFuIiwibnVsbCIsImFsaWFzIiwid2VibWFuaWZlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jsx.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/jsx.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nmodule.exports = jsx;\njsx.displayName = \"jsx\";\njsx.aliases = [];\nfunction jsx(Prism) {\n    ;\n    (function(Prism) {\n        var javascript = Prism.util.clone(Prism.languages.javascript);\n        var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n        var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n        var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n        /**\n     * @param {string} source\n     * @param {string} [flags]\n     */ function re(source, flags) {\n            source = source.replace(/<S>/g, function() {\n                return space;\n            }).replace(/<BRACES>/g, function() {\n                return braces;\n            }).replace(/<SPREAD>/g, function() {\n                return spread;\n            });\n            return RegExp(source, flags);\n        }\n        spread = re(spread).source;\n        Prism.languages.jsx = Prism.languages.extend(\"markup\", javascript);\n        Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n        Prism.languages.jsx.tag.inside[\"tag\"].pattern = /^<\\/?[^\\s>\\/]*/;\n        Prism.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n        Prism.languages.jsx.tag.inside[\"tag\"].inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n        Prism.languages.jsx.tag.inside[\"comment\"] = javascript[\"comment\"];\n        Prism.languages.insertBefore(\"inside\", \"attr-name\", {\n            spread: {\n                pattern: re(/<SPREAD>/.source),\n                inside: Prism.languages.jsx\n            }\n        }, Prism.languages.jsx.tag);\n        Prism.languages.insertBefore(\"inside\", \"special-attr\", {\n            script: {\n                // Allow for two levels of nesting\n                pattern: re(/=<BRACES>/.source),\n                alias: \"language-javascript\",\n                inside: {\n                    \"script-punctuation\": {\n                        pattern: /^=(?=\\{)/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.jsx\n                }\n            }\n        }, Prism.languages.jsx.tag) // The following will handle plain text inside tags\n        ;\n        var stringifyToken = function(token) {\n            if (!token) {\n                return \"\";\n            }\n            if (typeof token === \"string\") {\n                return token;\n            }\n            if (typeof token.content === \"string\") {\n                return token.content;\n            }\n            return token.content.map(stringifyToken).join(\"\");\n        };\n        var walkTokens = function(tokens) {\n            var openedTags = [];\n            for(var i = 0; i < tokens.length; i++){\n                var token = tokens[i];\n                var notTagNorBrace = false;\n                if (typeof token !== \"string\") {\n                    if (token.type === \"tag\" && token.content[0] && token.content[0].type === \"tag\") {\n                        // We found a tag, now find its kind\n                        if (token.content[0].content[0].content === \"</\") {\n                            // Closing tag\n                            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                                // Pop matching opening tag\n                                openedTags.pop();\n                            }\n                        } else {\n                            if (token.content[token.content.length - 1].content === \"/>\") {\n                            // Autoclosed tag, ignore\n                            } else {\n                                // Opening tag\n                                openedTags.push({\n                                    tagName: stringifyToken(token.content[0].content[1]),\n                                    openedBraces: 0\n                                });\n                            }\n                        }\n                    } else if (openedTags.length > 0 && token.type === \"punctuation\" && token.content === \"{\") {\n                        // Here we might have entered a JSX context inside a tag\n                        openedTags[openedTags.length - 1].openedBraces++;\n                    } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === \"punctuation\" && token.content === \"}\") {\n                        // Here we might have left a JSX context inside a tag\n                        openedTags[openedTags.length - 1].openedBraces--;\n                    } else {\n                        notTagNorBrace = true;\n                    }\n                }\n                if (notTagNorBrace || typeof token === \"string\") {\n                    if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n                        // Here we are inside a tag, and not inside a JSX context.\n                        // That's plain text: drop any tokens matched.\n                        var plainText = stringifyToken(token) // And merge text with adjacent text\n                        ;\n                        if (i < tokens.length - 1 && (typeof tokens[i + 1] === \"string\" || tokens[i + 1].type === \"plain-text\")) {\n                            plainText += stringifyToken(tokens[i + 1]);\n                            tokens.splice(i + 1, 1);\n                        }\n                        if (i > 0 && (typeof tokens[i - 1] === \"string\" || tokens[i - 1].type === \"plain-text\")) {\n                            plainText = stringifyToken(tokens[i - 1]) + plainText;\n                            tokens.splice(i - 1, 1);\n                            i--;\n                        }\n                        tokens[i] = new Prism.Token(\"plain-text\", plainText, null, plainText);\n                    }\n                }\n                if (token.content && typeof token.content !== \"string\") {\n                    walkTokens(token.content);\n                }\n            }\n        };\n        Prism.hooks.add(\"after-tokenize\", function(env) {\n            if (env.language !== \"jsx\" && env.language !== \"tsx\") {\n                return;\n            }\n            walkTokens(env.tokens);\n        });\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jsx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/markup.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/markup.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nmodule.exports = markup;\nmarkup.displayName = \"markup\";\nmarkup.aliases = [\n    \"html\",\n    \"mathml\",\n    \"svg\",\n    \"xml\",\n    \"ssml\",\n    \"atom\",\n    \"rss\"\n];\nfunction markup(Prism) {\n    Prism.languages.markup = {\n        comment: {\n            pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n            greedy: true\n        },\n        prolog: {\n            pattern: /<\\?[\\s\\S]+?\\?>/,\n            greedy: true\n        },\n        doctype: {\n            // https://www.w3.org/TR/xml/#NT-doctypedecl\n            pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n            greedy: true,\n            inside: {\n                \"internal-subset\": {\n                    pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: null // see below\n                },\n                string: {\n                    pattern: /\"[^\"]*\"|'[^']*'/,\n                    greedy: true\n                },\n                punctuation: /^<!|>$|[[\\]]/,\n                \"doctype-tag\": /^DOCTYPE/i,\n                name: /[^\\s<>'\"]+/\n            }\n        },\n        cdata: {\n            pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n            greedy: true\n        },\n        tag: {\n            pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n            greedy: true,\n            inside: {\n                tag: {\n                    pattern: /^<\\/?[^\\s>\\/]+/,\n                    inside: {\n                        punctuation: /^<\\/?/,\n                        namespace: /^[^\\s>\\/:]+:/\n                    }\n                },\n                \"special-attr\": [],\n                \"attr-value\": {\n                    pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                    inside: {\n                        punctuation: [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                },\n                punctuation: /\\/?>/,\n                \"attr-name\": {\n                    pattern: /[^\\s>\\/]+/,\n                    inside: {\n                        namespace: /^[^\\s>\\/:]+:/\n                    }\n                }\n            }\n        },\n        entity: [\n            {\n                pattern: /&[\\da-z]{1,8};/i,\n                alias: \"named-entity\"\n            },\n            /&#x?[\\da-f]{1,8};/i\n        ]\n    };\n    Prism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\n    Prism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = Prism.languages.markup // Plugin to make entity title show the real entity, idea by Roman Komarov\n    ;\n    Prism.hooks.add(\"wrap\", function(env) {\n        if (env.type === \"entity\") {\n            env.attributes[\"title\"] = env.content.value.replace(/&amp;/, \"&\");\n        }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n        /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */ value: function addInlined(tagName, lang) {\n            var includedCdataInside = {};\n            includedCdataInside[\"language-\" + lang] = {\n                pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n                lookbehind: true,\n                inside: Prism.languages[lang]\n            };\n            includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n            var inside = {\n                \"included-cdata\": {\n                    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                    inside: includedCdataInside\n                }\n            };\n            inside[\"language-\" + lang] = {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages[lang]\n            };\n            var def = {};\n            def[tagName] = {\n                pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                    return tagName;\n                }), \"i\"),\n                lookbehind: true,\n                greedy: true,\n                inside: inside\n            };\n            Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n        }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n        /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */ value: function(attrName, lang) {\n            Prism.languages.markup.tag.inside[\"special-attr\"].push({\n                pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n                lookbehind: true,\n                inside: {\n                    \"attr-name\": /^[^\\s=]+/,\n                    \"attr-value\": {\n                        pattern: /=[\\s\\S]+/,\n                        inside: {\n                            value: {\n                                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                                lookbehind: true,\n                                alias: [\n                                    lang,\n                                    \"language-\" + lang\n                                ],\n                                inside: Prism.languages[lang]\n                            },\n                            punctuation: [\n                                {\n                                    pattern: /^=/,\n                                    alias: \"attr-equals\"\n                                },\n                                /\"|'/\n                            ]\n                        }\n                    }\n                }\n            });\n        }\n    });\n    Prism.languages.html = Prism.languages.markup;\n    Prism.languages.mathml = Prism.languages.markup;\n    Prism.languages.svg = Prism.languages.markup;\n    Prism.languages.xml = Prism.languages.extend(\"markup\", {});\n    Prism.languages.ssml = Prism.languages.xml;\n    Prism.languages.atom = Prism.languages.xml;\n    Prism.languages.rss = Prism.languages.xml;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWFya3VwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLE9BQU9DLFdBQVcsR0FBRztBQUNyQkQsT0FBT0UsT0FBTyxHQUFHO0lBQUM7SUFBUTtJQUFVO0lBQU87SUFBTztJQUFRO0lBQVE7Q0FBTTtBQUN4RSxTQUFTRixPQUFPRyxLQUFLO0lBQ25CQSxNQUFNQyxTQUFTLENBQUNKLE1BQU0sR0FBRztRQUN2QkssU0FBUztZQUNQQyxTQUFTO1lBQ1RDLFFBQVE7UUFDVjtRQUNBQyxRQUFRO1lBQ05GLFNBQVM7WUFDVEMsUUFBUTtRQUNWO1FBQ0FFLFNBQVM7WUFDUCw0Q0FBNEM7WUFDNUNILFNBQ0U7WUFDRkMsUUFBUTtZQUNSRyxRQUFRO2dCQUNOLG1CQUFtQjtvQkFDakJKLFNBQVM7b0JBQ1RLLFlBQVk7b0JBQ1pKLFFBQVE7b0JBQ1JHLFFBQVEsS0FBSyxZQUFZO2dCQUMzQjtnQkFDQUUsUUFBUTtvQkFDTk4sU0FBUztvQkFDVEMsUUFBUTtnQkFDVjtnQkFDQU0sYUFBYTtnQkFDYixlQUFlO2dCQUNmQyxNQUFNO1lBQ1I7UUFDRjtRQUNBQyxPQUFPO1lBQ0xULFNBQVM7WUFDVEMsUUFBUTtRQUNWO1FBQ0FTLEtBQUs7WUFDSFYsU0FDRTtZQUNGQyxRQUFRO1lBQ1JHLFFBQVE7Z0JBQ05NLEtBQUs7b0JBQ0hWLFNBQVM7b0JBQ1RJLFFBQVE7d0JBQ05HLGFBQWE7d0JBQ2JJLFdBQVc7b0JBQ2I7Z0JBQ0Y7Z0JBQ0EsZ0JBQWdCLEVBQUU7Z0JBQ2xCLGNBQWM7b0JBQ1pYLFNBQVM7b0JBQ1RJLFFBQVE7d0JBQ05HLGFBQWE7NEJBQ1g7Z0NBQ0VQLFNBQVM7Z0NBQ1RZLE9BQU87NEJBQ1Q7NEJBQ0E7eUJBQ0Q7b0JBQ0g7Z0JBQ0Y7Z0JBQ0FMLGFBQWE7Z0JBQ2IsYUFBYTtvQkFDWFAsU0FBUztvQkFDVEksUUFBUTt3QkFDTk8sV0FBVztvQkFDYjtnQkFDRjtZQUNGO1FBQ0Y7UUFDQUUsUUFBUTtZQUNOO2dCQUNFYixTQUFTO2dCQUNUWSxPQUFPO1lBQ1Q7WUFDQTtTQUNEO0lBQ0g7SUFDQWYsTUFBTUMsU0FBUyxDQUFDSixNQUFNLENBQUMsTUFBTSxDQUFDVSxNQUFNLENBQUMsYUFBYSxDQUFDQSxNQUFNLENBQUMsU0FBUyxHQUNqRVAsTUFBTUMsU0FBUyxDQUFDSixNQUFNLENBQUMsU0FBUztJQUNsQ0csTUFBTUMsU0FBUyxDQUFDSixNQUFNLENBQUMsVUFBVSxDQUFDVSxNQUFNLENBQUMsa0JBQWtCLENBQUNBLE1BQU0sR0FDaEVQLE1BQU1DLFNBQVMsQ0FBQ0osTUFBTSxDQUFDLDBFQUEwRTs7SUFDbkdHLE1BQU1pQixLQUFLLENBQUNDLEdBQUcsQ0FBQyxRQUFRLFNBQVVDLEdBQUc7UUFDbkMsSUFBSUEsSUFBSUMsSUFBSSxLQUFLLFVBQVU7WUFDekJELElBQUlFLFVBQVUsQ0FBQyxRQUFRLEdBQUdGLElBQUlHLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLENBQUMsU0FBUztRQUMvRDtJQUNGO0lBQ0FDLE9BQU9DLGNBQWMsQ0FBQzFCLE1BQU1DLFNBQVMsQ0FBQ0osTUFBTSxDQUFDZ0IsR0FBRyxFQUFFLGNBQWM7UUFDOUQ7Ozs7Ozs7Ozs7S0FVQyxHQUNEVSxPQUFPLFNBQVNJLFdBQVdDLE9BQU8sRUFBRUMsSUFBSTtZQUN0QyxJQUFJQyxzQkFBc0IsQ0FBQztZQUMzQkEsbUJBQW1CLENBQUMsY0FBY0QsS0FBSyxHQUFHO2dCQUN4QzFCLFNBQVM7Z0JBQ1RLLFlBQVk7Z0JBQ1pELFFBQVFQLE1BQU1DLFNBQVMsQ0FBQzRCLEtBQUs7WUFDL0I7WUFDQUMsbUJBQW1CLENBQUMsUUFBUSxHQUFHO1lBQy9CLElBQUl2QixTQUFTO2dCQUNYLGtCQUFrQjtvQkFDaEJKLFNBQVM7b0JBQ1RJLFFBQVF1QjtnQkFDVjtZQUNGO1lBQ0F2QixNQUFNLENBQUMsY0FBY3NCLEtBQUssR0FBRztnQkFDM0IxQixTQUFTO2dCQUNUSSxRQUFRUCxNQUFNQyxTQUFTLENBQUM0QixLQUFLO1lBQy9CO1lBQ0EsSUFBSUUsTUFBTSxDQUFDO1lBQ1hBLEdBQUcsQ0FBQ0gsUUFBUSxHQUFHO2dCQUNiekIsU0FBUzZCLE9BQ1Asd0ZBQXdGQyxNQUFNLENBQUNULE9BQU8sQ0FDcEcsT0FDQTtvQkFDRSxPQUFPSTtnQkFDVCxJQUVGO2dCQUVGcEIsWUFBWTtnQkFDWkosUUFBUTtnQkFDUkcsUUFBUUE7WUFDVjtZQUNBUCxNQUFNQyxTQUFTLENBQUNpQyxZQUFZLENBQUMsVUFBVSxTQUFTSDtRQUNsRDtJQUNGO0lBQ0FOLE9BQU9DLGNBQWMsQ0FBQzFCLE1BQU1DLFNBQVMsQ0FBQ0osTUFBTSxDQUFDZ0IsR0FBRyxFQUFFLGdCQUFnQjtRQUNoRTs7Ozs7Ozs7OztLQVVDLEdBQ0RVLE9BQU8sU0FBVVksUUFBUSxFQUFFTixJQUFJO1lBQzdCN0IsTUFBTUMsU0FBUyxDQUFDSixNQUFNLENBQUNnQixHQUFHLENBQUNOLE1BQU0sQ0FBQyxlQUFlLENBQUM2QixJQUFJLENBQUM7Z0JBQ3JEakMsU0FBUzZCLE9BQ1AsYUFBYUMsTUFBTSxHQUNqQixRQUNBRSxXQUNBLE1BQ0EsaURBQWlERixNQUFNLEVBQ3pEO2dCQUVGekIsWUFBWTtnQkFDWkQsUUFBUTtvQkFDTixhQUFhO29CQUNiLGNBQWM7d0JBQ1pKLFNBQVM7d0JBQ1RJLFFBQVE7NEJBQ05nQixPQUFPO2dDQUNMcEIsU0FBUztnQ0FDVEssWUFBWTtnQ0FDWk8sT0FBTztvQ0FBQ2M7b0NBQU0sY0FBY0E7aUNBQUs7Z0NBQ2pDdEIsUUFBUVAsTUFBTUMsU0FBUyxDQUFDNEIsS0FBSzs0QkFDL0I7NEJBQ0FuQixhQUFhO2dDQUNYO29DQUNFUCxTQUFTO29DQUNUWSxPQUFPO2dDQUNUO2dDQUNBOzZCQUNEO3dCQUNIO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0FmLE1BQU1DLFNBQVMsQ0FBQ29DLElBQUksR0FBR3JDLE1BQU1DLFNBQVMsQ0FBQ0osTUFBTTtJQUM3Q0csTUFBTUMsU0FBUyxDQUFDcUMsTUFBTSxHQUFHdEMsTUFBTUMsU0FBUyxDQUFDSixNQUFNO0lBQy9DRyxNQUFNQyxTQUFTLENBQUNzQyxHQUFHLEdBQUd2QyxNQUFNQyxTQUFTLENBQUNKLE1BQU07SUFDNUNHLE1BQU1DLFNBQVMsQ0FBQ3VDLEdBQUcsR0FBR3hDLE1BQU1DLFNBQVMsQ0FBQ3dDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDeER6QyxNQUFNQyxTQUFTLENBQUN5QyxJQUFJLEdBQUcxQyxNQUFNQyxTQUFTLENBQUN1QyxHQUFHO0lBQzFDeEMsTUFBTUMsU0FBUyxDQUFDMEMsSUFBSSxHQUFHM0MsTUFBTUMsU0FBUyxDQUFDdUMsR0FBRztJQUMxQ3hDLE1BQU1DLFNBQVMsQ0FBQzJDLEdBQUcsR0FBRzVDLE1BQU1DLFNBQVMsQ0FBQ3VDLEdBQUc7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbGktY3Jvc3NsYW5kLXZpZGVvZ3JhcGh5Ly4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL21hcmt1cC5qcz84MDZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcmt1cFxubWFya3VwLmRpc3BsYXlOYW1lID0gJ21hcmt1cCdcbm1hcmt1cC5hbGlhc2VzID0gWydodG1sJywgJ21hdGhtbCcsICdzdmcnLCAneG1sJywgJ3NzbWwnLCAnYXRvbScsICdyc3MnXVxuZnVuY3Rpb24gbWFya3VwKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5tYXJrdXAgPSB7XG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogLzwhLS0oPzooPyE8IS0tKVtcXHNcXFNdKSo/LS0+LyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgcHJvbG9nOiB7XG4gICAgICBwYXR0ZXJuOiAvPFxcP1tcXHNcXFNdKz9cXD8+LyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgZG9jdHlwZToge1xuICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jTlQtZG9jdHlwZWRlY2xcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC88IURPQ1RZUEUoPzpbXj5cIidbXFxdXXxcIlteXCJdKlwifCdbXiddKicpKyg/OlxcWyg/OltePFwiJ1xcXV18XCJbXlwiXSpcInwnW14nXSonfDwoPyEhLS0pfDwhLS0oPzpbXi1dfC0oPyEtPikpKi0tPikqXFxdXFxzKik/Pi9pLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdpbnRlcm5hbC1zdWJzZXQnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyheW15cXFtdKlxcWylbXFxzXFxTXSsoPz1cXF0+JCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgfSxcbiAgICAgICAgc3RyaW5nOiB7XG4gICAgICAgICAgcGF0dGVybjogL1wiW15cIl0qXCJ8J1teJ10qJy8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXjwhfD4kfFtbXFxdXS8sXG4gICAgICAgICdkb2N0eXBlLXRhZyc6IC9eRE9DVFlQRS9pLFxuICAgICAgICBuYW1lOiAvW15cXHM8PidcIl0rL1xuICAgICAgfVxuICAgIH0sXG4gICAgY2RhdGE6IHtcbiAgICAgIHBhdHRlcm46IC88IVxcW0NEQVRBXFxbW1xcc1xcU10qP1xcXVxcXT4vaSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgdGFnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvPFxcLz8oPyFcXGQpW15cXHM+XFwvPSQ8JV0rKD86XFxzKD86XFxzKlteXFxzPlxcLz1dKyg/Olxccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXlxccydcIj49XSsoPz1bXFxzPl0pKXwoPz1bXFxzLz5dKSkpKyk/XFxzKlxcLz8+LyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICB0YWc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXjxcXC8/W15cXHM+XFwvXSsvLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9ePFxcLz8vLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiAvXlteXFxzPlxcLzpdKzovXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnc3BlY2lhbC1hdHRyJzogW10sXG4gICAgICAgICdhdHRyLXZhbHVlJzoge1xuICAgICAgICAgIHBhdHRlcm46IC89XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXlxccydcIj49XSspLyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXj0vLFxuICAgICAgICAgICAgICAgIGFsaWFzOiAnYXR0ci1lcXVhbHMnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIC9cInwnL1xuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9cXC8/Pi8sXG4gICAgICAgICdhdHRyLW5hbWUnOiB7XG4gICAgICAgICAgcGF0dGVybjogL1teXFxzPlxcL10rLyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIG5hbWVzcGFjZTogL15bXlxccz5cXC86XSs6L1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZW50aXR5OiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8mW1xcZGEtel17MSw4fTsvaSxcbiAgICAgICAgYWxpYXM6ICduYW1lZC1lbnRpdHknXG4gICAgICB9LFxuICAgICAgLyYjeD9bXFxkYS1mXXsxLDh9Oy9pXG4gICAgXVxuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5tYXJrdXBbJ3RhZyddLmluc2lkZVsnYXR0ci12YWx1ZSddLmluc2lkZVsnZW50aXR5J10gPVxuICAgIFByaXNtLmxhbmd1YWdlcy5tYXJrdXBbJ2VudGl0eSddXG4gIFByaXNtLmxhbmd1YWdlcy5tYXJrdXBbJ2RvY3R5cGUnXS5pbnNpZGVbJ2ludGVybmFsLXN1YnNldCddLmluc2lkZSA9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCAvLyBQbHVnaW4gdG8gbWFrZSBlbnRpdHkgdGl0bGUgc2hvdyB0aGUgcmVhbCBlbnRpdHksIGlkZWEgYnkgUm9tYW4gS29tYXJvdlxuICBQcmlzbS5ob29rcy5hZGQoJ3dyYXAnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgaWYgKGVudi50eXBlID09PSAnZW50aXR5Jykge1xuICAgICAgZW52LmF0dHJpYnV0ZXNbJ3RpdGxlJ10gPSBlbnYuY29udGVudC52YWx1ZS5yZXBsYWNlKC8mYW1wOy8sICcmJylcbiAgICB9XG4gIH0pXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZywgJ2FkZElubGluZWQnLCB7XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBpbmxpbmVkIGxhbmd1YWdlIHRvIG1hcmt1cC5cbiAgICAgKlxuICAgICAqIEFuIGV4YW1wbGUgb2YgYW4gaW5saW5lZCBsYW5ndWFnZSBpcyBDU1Mgd2l0aCBgPHN0eWxlPmAgdGFncy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWcgdGhhdCBjb250YWlucyB0aGUgaW5saW5lZCBsYW5ndWFnZS4gVGhpcyBuYW1lIHdpbGwgYmUgdHJlYXRlZCBhc1xuICAgICAqIGNhc2UgaW5zZW5zaXRpdmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmcgVGhlIGxhbmd1YWdlIGtleS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpO1xuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJbmxpbmVkKHRhZ05hbWUsIGxhbmcpIHtcbiAgICAgIHZhciBpbmNsdWRlZENkYXRhSW5zaWRlID0ge31cbiAgICAgIGluY2x1ZGVkQ2RhdGFJbnNpZGVbJ2xhbmd1YWdlLScgKyBsYW5nXSA9IHtcbiAgICAgICAgcGF0dGVybjogLyhePCFcXFtDREFUQVxcWylbXFxzXFxTXSs/KD89XFxdXFxdPiQpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG4gICAgICB9XG4gICAgICBpbmNsdWRlZENkYXRhSW5zaWRlWydjZGF0YSddID0gL148IVxcW0NEQVRBXFxbfFxcXVxcXT4kL2lcbiAgICAgIHZhciBpbnNpZGUgPSB7XG4gICAgICAgICdpbmNsdWRlZC1jZGF0YSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksXG4gICAgICAgICAgaW5zaWRlOiBpbmNsdWRlZENkYXRhSW5zaWRlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluc2lkZVsnbGFuZ3VhZ2UtJyArIGxhbmddID0ge1xuICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXNbbGFuZ11cbiAgICAgIH1cbiAgICAgIHZhciBkZWYgPSB7fVxuICAgICAgZGVmW3RhZ05hbWVdID0ge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgLyg8X19bXj5dKj4pKD86PCFcXFtDREFUQVxcWyg/OlteXFxdXXxcXF0oPyFcXF0+KSkqXFxdXFxdPnwoPyE8IVxcW0NEQVRBXFxbKVtcXHNcXFNdKSo/KD89PFxcL19fPikvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgL19fL2csXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKSxcbiAgICAgICAgICAnaSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IGluc2lkZVxuICAgICAgfVxuICAgICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ2NkYXRhJywgZGVmKVxuICAgIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLCAnYWRkQXR0cmlidXRlJywge1xuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gcGF0dGVybiB0byBoaWdobGlnaHQgbGFuZ3VhZ2VzIGVtYmVkZGVkIGluIEhUTUwgYXR0cmlidXRlcy5cbiAgICAgKlxuICAgICAqIEFuIGV4YW1wbGUgb2YgYW4gaW5saW5lZCBsYW5ndWFnZSBpcyBDU1Mgd2l0aCBgc3R5bGVgIGF0dHJpYnV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0ck5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhZyB0aGF0IGNvbnRhaW5zIHRoZSBpbmxpbmVkIGxhbmd1YWdlLiBUaGlzIG5hbWUgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAgICogY2FzZSBpbnNlbnNpdGl2ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyBUaGUgbGFuZ3VhZ2Uga2V5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYWRkQXR0cmlidXRlKCdzdHlsZScsICdjc3MnKTtcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gKGF0dHJOYW1lLCBsYW5nKSB7XG4gICAgICBQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5pbnNpZGVbJ3NwZWNpYWwtYXR0ciddLnB1c2goe1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgLyhefFtcIidcXHNdKS8uc291cmNlICtcbiAgICAgICAgICAgICcoPzonICtcbiAgICAgICAgICAgIGF0dHJOYW1lICtcbiAgICAgICAgICAgICcpJyArXG4gICAgICAgICAgICAvXFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKyg/PVtcXHM+XSkpLy5zb3VyY2UsXG4gICAgICAgICAgJ2knXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdhdHRyLW5hbWUnOiAvXlteXFxzPV0rLyxcbiAgICAgICAgICAnYXR0ci12YWx1ZSc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC89W1xcc1xcU10rLyxcbiAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oXj1cXHMqKFtcIiddfCg/IVtcIiddKSkpXFxTW1xcc1xcU10qKD89XFwyJCkvLFxuICAgICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFtsYW5nLCAnbGFuZ3VhZ2UtJyArIGxhbmddLFxuICAgICAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHB1bmN0dWF0aW9uOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcGF0dGVybjogL149LyxcbiAgICAgICAgICAgICAgICAgIGFsaWFzOiAnYXR0ci1lcXVhbHMnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvXCJ8Jy9cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy5odG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFxuICBQcmlzbS5sYW5ndWFnZXMubWF0aG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFxuICBQcmlzbS5sYW5ndWFnZXMuc3ZnID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFxuICBQcmlzbS5sYW5ndWFnZXMueG1sID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnbWFya3VwJywge30pXG4gIFByaXNtLmxhbmd1YWdlcy5zc21sID0gUHJpc20ubGFuZ3VhZ2VzLnhtbFxuICBQcmlzbS5sYW5ndWFnZXMuYXRvbSA9IFByaXNtLmxhbmd1YWdlcy54bWxcbiAgUHJpc20ubGFuZ3VhZ2VzLnJzcyA9IFByaXNtLmxhbmd1YWdlcy54bWxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWFya3VwIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImdyZWVkeSIsInByb2xvZyIsImRvY3R5cGUiLCJpbnNpZGUiLCJsb29rYmVoaW5kIiwic3RyaW5nIiwicHVuY3R1YXRpb24iLCJuYW1lIiwiY2RhdGEiLCJ0YWciLCJuYW1lc3BhY2UiLCJhbGlhcyIsImVudGl0eSIsImhvb2tzIiwiYWRkIiwiZW52IiwidHlwZSIsImF0dHJpYnV0ZXMiLCJjb250ZW50IiwidmFsdWUiLCJyZXBsYWNlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJhZGRJbmxpbmVkIiwidGFnTmFtZSIsImxhbmciLCJpbmNsdWRlZENkYXRhSW5zaWRlIiwiZGVmIiwiUmVnRXhwIiwic291cmNlIiwiaW5zZXJ0QmVmb3JlIiwiYXR0ck5hbWUiLCJwdXNoIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsInhtbCIsImV4dGVuZCIsInNzbWwiLCJhdG9tIiwicnNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/markup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/typescript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/typescript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = typescript;\ntypescript.displayName = \"typescript\";\ntypescript.aliases = [\n    \"ts\"\n];\nfunction typescript(Prism) {\n    ;\n    (function(Prism) {\n        Prism.languages.typescript = Prism.languages.extend(\"javascript\", {\n            \"class-name\": {\n                pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n                lookbehind: true,\n                greedy: true,\n                inside: null // see below\n            },\n            builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n        }) // The keywords TypeScript adds to JavaScript\n        ;\n        Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, /\\btype\\b(?=\\s*(?:[\\{*]|$))/) // doesn't work with TS because TS is too complex\n        ;\n        delete Prism.languages.typescript[\"parameter\"];\n        delete Prism.languages.typescript[\"literal-property\"] // a version of typescript specifically for highlighting types\n        ;\n        var typeInside = Prism.languages.extend(\"typescript\", {});\n        delete typeInside[\"class-name\"];\n        Prism.languages.typescript[\"class-name\"].inside = typeInside;\n        Prism.languages.insertBefore(\"typescript\", \"function\", {\n            decorator: {\n                pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n                inside: {\n                    at: {\n                        pattern: /^@/,\n                        alias: \"operator\"\n                    },\n                    function: /^[\\s\\S]+/\n                }\n            },\n            \"generic-function\": {\n                // e.g. foo<T extends \"bar\" | \"baz\">( ...\n                pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n                greedy: true,\n                inside: {\n                    function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n                    generic: {\n                        pattern: /<[\\s\\S]+/,\n                        // everything after the first <\n                        alias: \"class-name\",\n                        inside: typeInside\n                    }\n                }\n            }\n        });\n        Prism.languages.ts = Prism.languages.typescript;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHlwZXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxXQUFXQyxXQUFXLEdBQUc7QUFDekJELFdBQVdFLE9BQU8sR0FBRztJQUFDO0NBQUs7QUFDM0IsU0FBU0YsV0FBV0csS0FBSzs7SUFDckIsVUFBVUEsS0FBSztRQUNmQSxNQUFNQyxTQUFTLENBQUNKLFVBQVUsR0FBR0csTUFBTUMsU0FBUyxDQUFDQyxNQUFNLENBQUMsY0FBYztZQUNoRSxjQUFjO2dCQUNaQyxTQUNFO2dCQUNGQyxZQUFZO2dCQUNaQyxRQUFRO2dCQUNSQyxRQUFRLEtBQUssWUFBWTtZQUMzQjtZQUNBQyxTQUNFO1FBQ0osR0FBRyw2Q0FBNkM7O1FBQ2hEUCxNQUFNQyxTQUFTLENBQUNKLFVBQVUsQ0FBQ1csT0FBTyxDQUFDQyxJQUFJLENBQ3JDLHNEQUNBLDRGQUNBLDhCQUNBLGlEQUFpRDs7UUFDbkQsT0FBT1QsTUFBTUMsU0FBUyxDQUFDSixVQUFVLENBQUMsWUFBWTtRQUM5QyxPQUFPRyxNQUFNQyxTQUFTLENBQUNKLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyw4REFBOEQ7O1FBQ3BILElBQUlhLGFBQWFWLE1BQU1DLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUN2RCxPQUFPUSxVQUFVLENBQUMsYUFBYTtRQUMvQlYsTUFBTUMsU0FBUyxDQUFDSixVQUFVLENBQUMsYUFBYSxDQUFDUyxNQUFNLEdBQUdJO1FBQ2xEVixNQUFNQyxTQUFTLENBQUNVLFlBQVksQ0FBQyxjQUFjLFlBQVk7WUFDckRDLFdBQVc7Z0JBQ1RULFNBQVM7Z0JBQ1RHLFFBQVE7b0JBQ05PLElBQUk7d0JBQ0ZWLFNBQVM7d0JBQ1RXLE9BQU87b0JBQ1Q7b0JBQ0FDLFVBQVU7Z0JBQ1o7WUFDRjtZQUNBLG9CQUFvQjtnQkFDbEIseUNBQXlDO2dCQUN6Q1osU0FDRTtnQkFDRkUsUUFBUTtnQkFDUkMsUUFBUTtvQkFDTlMsVUFBVTtvQkFDVkMsU0FBUzt3QkFDUGIsU0FBUzt3QkFDVCwrQkFBK0I7d0JBQy9CVyxPQUFPO3dCQUNQUixRQUFRSTtvQkFDVjtnQkFDRjtZQUNGO1FBQ0Y7UUFDQVYsTUFBTUMsU0FBUyxDQUFDZ0IsRUFBRSxHQUFHakIsTUFBTUMsU0FBUyxDQUFDSixVQUFVO0lBQ2pELEdBQUdHO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbGktY3Jvc3NsYW5kLXZpZGVvZ3JhcGh5Ly4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL3R5cGVzY3JpcHQuanM/NWMzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlc2NyaXB0XG50eXBlc2NyaXB0LmRpc3BsYXlOYW1lID0gJ3R5cGVzY3JpcHQnXG50eXBlc2NyaXB0LmFsaWFzZXMgPSBbJ3RzJ11cbmZ1bmN0aW9uIHR5cGVzY3JpcHQoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2phdmFzY3JpcHQnLCB7XG4gICAgICAnY2xhc3MtbmFtZSc6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKFxcYig/OmNsYXNzfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfGludGVyZmFjZXxuZXd8dHlwZSlcXHMrKSg/IWtleW9mXFxiKSg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPzpcXHMqPCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPik/LyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IG51bGwgLy8gc2VlIGJlbG93XG4gICAgICB9LFxuICAgICAgYnVpbHRpbjpcbiAgICAgICAgL1xcYig/OkFycmF5fEZ1bmN0aW9ufFByb21pc2V8YW55fGJvb2xlYW58Y29uc29sZXxuZXZlcnxudW1iZXJ8c3RyaW5nfHN5bWJvbHx1bmtub3duKVxcYi9cbiAgICB9KSAvLyBUaGUga2V5d29yZHMgVHlwZVNjcmlwdCBhZGRzIHRvIEphdmFTY3JpcHRcbiAgICBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdC5rZXl3b3JkLnB1c2goXG4gICAgICAvXFxiKD86YWJzdHJhY3R8ZGVjbGFyZXxpc3xrZXlvZnxyZWFkb25seXxyZXF1aXJlKVxcYi8sIC8vIGtleXdvcmRzIHRoYXQgaGF2ZSB0byBiZSBmb2xsb3dlZCBieSBhbiBpZGVudGlmaWVyXG4gICAgICAvXFxiKD86YXNzZXJ0c3xpbmZlcnxpbnRlcmZhY2V8bW9kdWxlfG5hbWVzcGFjZXx0eXBlKVxcYig/PVxccyooPzpbe18kYS16QS1aXFx4QTAtXFx1RkZGRl18JCkpLywgLy8gVGhpcyBpcyBmb3IgYGltcG9ydCB0eXBlICosIHt9YFxuICAgICAgL1xcYnR5cGVcXGIoPz1cXHMqKD86W1xceypdfCQpKS9cbiAgICApIC8vIGRvZXNuJ3Qgd29yayB3aXRoIFRTIGJlY2F1c2UgVFMgaXMgdG9vIGNvbXBsZXhcbiAgICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ3BhcmFtZXRlciddXG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0WydsaXRlcmFsLXByb3BlcnR5J10gLy8gYSB2ZXJzaW9uIG9mIHR5cGVzY3JpcHQgc3BlY2lmaWNhbGx5IGZvciBoaWdobGlnaHRpbmcgdHlwZXNcbiAgICB2YXIgdHlwZUluc2lkZSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ3R5cGVzY3JpcHQnLCB7fSlcbiAgICBkZWxldGUgdHlwZUluc2lkZVsnY2xhc3MtbmFtZSddXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ2NsYXNzLW5hbWUnXS5pbnNpZGUgPSB0eXBlSW5zaWRlXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgndHlwZXNjcmlwdCcsICdmdW5jdGlvbicsIHtcbiAgICAgIGRlY29yYXRvcjoge1xuICAgICAgICBwYXR0ZXJuOiAvQFskXFx3XFx4QTAtXFx1RkZGRl0rLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgYXQ6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eQC8sXG4gICAgICAgICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb246IC9eW1xcc1xcU10rL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ2dlbmVyaWMtZnVuY3Rpb24nOiB7XG4gICAgICAgIC8vIGUuZy4gZm9vPFQgZXh0ZW5kcyBcImJhclwiIHwgXCJiYXpcIj4oIC4uLlxuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSpcXHMqPCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPig/PVxccypcXCgpLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBmdW5jdGlvbjogL14jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSovLFxuICAgICAgICAgIGdlbmVyaWM6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC88W1xcc1xcU10rLyxcbiAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IDxcbiAgICAgICAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZScsXG4gICAgICAgICAgICBpbnNpZGU6IHR5cGVJbnNpZGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy50cyA9IFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlc2NyaXB0IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsImluc2lkZSIsImJ1aWx0aW4iLCJrZXl3b3JkIiwicHVzaCIsInR5cGVJbnNpZGUiLCJpbnNlcnRCZWZvcmUiLCJkZWNvcmF0b3IiLCJhdCIsImFsaWFzIiwiZnVuY3Rpb24iLCJnZW5lcmljIiwidHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/typescript.js\n");

/***/ })

};
;